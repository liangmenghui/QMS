package com.unind.qms.web.basic.service.internal;

import com.unind.base.dao.admin.agg.SysUserRolesAggDao;
import com.unind.base.data.ApiResponseResult;
import com.unind.base.dbconnection.query.Datagrid;
import com.unind.base.domain.admin.agg.SysUserRolesAgg;
import com.unind.base.domain.admin.enumeration.BaseEnumConstants;
import com.unind.base.domain.admin.enumeration.BooleanStateEnum;
import com.unind.base.provider.BaseOprService;
import com.unind.base.provider.BaseService;
import com.unind.base.provider.BusinessException;
import com.unind.base.provider.context.SessionContextUtils;
import com.unind.qms.enumeration.BasicStateEnum;
import com.unind.qms.web.basic.dao.TodoInfoDao;
import com.unind.qms.web.basic.entity.TodoInfo;
import com.unind.qms.web.basic.service.TodoInfoService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springside.modules.persistence.SearchFilter;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
@Transactional(rollbackFor = BusinessException.class)
public class TodoInfoImpl extends BaseOprService implements TodoInfoService {
    @Autowired
    private TodoInfoDao todoInfoDao;
    @Autowired
    private SysUserRolesAggDao sysUserRolesAggDao;

    @Transactional
    public ApiResponseResult add(TodoInfo todoInfo, Long roleId) throws BusinessException {
        if (null == todoInfo.getBsUserId() && null == roleId) {
            return ApiResponseResult.failure("待办人和角色不能同时为空");
        }
        if (StringUtils.isEmpty(todoInfo.getBsTitle()) || StringUtils.isEmpty(todoInfo.getBsTitle().trim())) {
            return ApiResponseResult.failure("标题不能为空");
        }
        todoInfo.setBsTitle(todoInfo.getBsTitle().trim());
        todoInfo.setBsSystemType(BasicStateEnum.TODO_QMSTYPE.intValue());
//        todoInfo.setBsNo(todoInfo.getBsNo().trim());
//        todoInfo.setBsType(todoInfo.getBsType());
//        todoInfo.setBsSubtype(todoInfo.getBsSubtype());
//        todoInfo.setBsContent(todoInfo.getBsContent());
//        todoInfo.setBsStandard(todoInfo.getBsStandard());
//        todoInfo.setBsRemark(todoInfo.getBsRemark());

        todoInfo.setBsCreatedTime(new Date());
        todoInfo.setPkCreatedBy(SessionContextUtils.getCurrentUser().getId());
        //用户ID不为空时只添加一个用户
        if(null != todoInfo.getBsUserId()){
            todoInfoDao.save(todoInfo);
        }
        //用户ID为空，角色ID不为空时，添加角色下的所有用户待办
        if(null == todoInfo.getBsUserId() && null != roleId){
            List<SearchFilter> filters = new ArrayList<SearchFilter>();
            filters.add(new SearchFilter("pkRole", SearchFilter.Operator.EQ, roleId));
            Specifications<SysUserRolesAgg> spec = Specifications.where(super.and(filters, SysUserRolesAgg.class));
            List<SysUserRolesAgg> sysUserRolesAggList = sysUserRolesAggDao.findAll(spec);
            if(sysUserRolesAggList == null){
                return ApiResponseResult.failure("该角色下的用户不存在").data(roleId);
            }
            //添加待办事项
            List<TodoInfo> todoInfoList = new ArrayList<TodoInfo>();
            for(int i = 0; i < sysUserRolesAggList.size(); i++){
                TodoInfo todoInfoItem = todoInfo;
                todoInfoItem.setBsUserId(sysUserRolesAggList.get(i).getPkUser());
                todoInfoList.add(todoInfoItem);
            }
            todoInfoDao.save(todoInfoList);
        }
        return ApiResponseResult.success("新增成功！").data(todoInfo);
    }

    @Transactional
    public ApiResponseResult edit(TodoInfo todoInfo) throws BusinessException {
        if (null == todoInfo || null == todoInfo.getId()) {
            return ApiResponseResult.failure("记录ID为必填项");
        }
        if (null == todoInfo.getBsUserId()) {
            return ApiResponseResult.failure("待办人不能为空");
        }
        if (StringUtils.isEmpty(todoInfo.getBsTitle()) || StringUtils.isEmpty(todoInfo.getBsTitle().trim())) {
            return ApiResponseResult.failure("标题不能为空");
        }
        TodoInfo o = todoInfoDao.findOne(todoInfo.getId());
        if (null == o) {
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
//        if (!StringUtils.equals(approvedFlow.getBsName().trim(), o.getBsName())) {
//            int counts = approvedFlowDao.countByBsName(approvedFlow.getBsName());
//            if (counts > 0) {
//                return ApiResponseResult.failure("项目名称不能重复");
//            }
//            o.setBsName(approvedFlow.getBsName().trim());
//        }
        o.setBsUserId(todoInfo.getBsUserId());
        o.setBsRouter(todoInfo.getBsRouter().trim());
        o.setBsTitle(todoInfo.getBsTitle().trim());
        o.setBsContent(todoInfo.getBsContent());
        o.setBsType(todoInfo.getBsType());
        o.setBsPriority(todoInfo.getBsPriority());
        o.setBsReferId(todoInfo.getBsReferId());

        o.setBsModifiedTime(new Date());
		o.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
//        o.setPkModifiedBy(Long.parseLong("1"));
        todoInfoDao.save(o);
        return ApiResponseResult.success("修改成功！").data(o);
    }

    @Transactional
    public ApiResponseResult close(Long bsUserId, Long roleId, Long bsReferId) throws BusinessException {
        if(null != bsUserId && null != bsReferId){
            todoInfoDao.closeByBsUserIdAndBsAndBsReferId(bsUserId, bsReferId);
            return ApiResponseResult.success("修改成功！");
        }
        if(null == bsUserId && null != roleId && null != bsReferId){
            todoInfoDao.closeByRoleIdAndBsReferId(roleId, bsReferId);
            return ApiResponseResult.success("修改成功！");
        }
        return ApiResponseResult.failure("修改失败！");
    }

    @Transactional
    public ApiResponseResult delete(Long id) throws BusinessException {
        TodoInfo o = todoInfoDao.findOne(id);
        if (null == o) {
            return ApiResponseResult.failure("记录ID不存在或已被删除").status("error1");
        }
        if (o.getId() <= 0) {
            return ApiResponseResult.failure("没有操作权限");
        }
        o.setBsIsDel(BooleanStateEnum.TRUE.intValue());
        todoInfoDao.save(o);
        return ApiResponseResult.success("删除成功！");
    }

    @Transactional(readOnly = true)
    public ApiResponseResult getlist(int bsStatus, PageRequest pageRequest) {
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BooleanStateEnum.FALSE.intValue()));
        filters.add(new SearchFilter("bsStatus", SearchFilter.Operator.EQ, bsStatus));
        filters.add(new SearchFilter("bsUserId", SearchFilter.Operator.EQ, SessionContextUtils.getCurrentUser().getId()));
        Specifications<TodoInfo> spec = Specifications.where(super.and(filters, TodoInfo.class));
        Page<TodoInfo> page = todoInfoDao.findAll(spec, pageRequest);
        return ApiResponseResult.success().data(Datagrid.create(page.getContent(), (int) page.getTotalElements(), pageRequest.getPageNumber() + 1, pageRequest.getPageSize()));
    }
}
