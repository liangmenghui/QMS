package com.unind.qms.web.risk.service.internal;

import com.unind.base.data.ApiResponseResult;
import com.unind.base.dbconnection.query.Datagrid;
import com.unind.base.domain.admin.BaseEntity;
import com.unind.base.domain.admin.enumeration.BaseEnumConstants;
import com.unind.base.domain.admin.enumeration.BooleanStateEnum;
import com.unind.base.provider.BaseOprService;
import com.unind.base.provider.BusinessException;
import com.unind.base.provider.context.SessionContextUtils;
import com.unind.qms.web.risk.dao.SupplierRiskDao;
import com.unind.qms.web.risk.entity.SupplierRisk;
import com.unind.qms.web.risk.service.SupplierRiskService;
import com.unind.qms.web.supplier.dao.SupplierInfoDao;
import com.unind.qms.web.supplier.entity.SupplierInfo;
import io.swagger.annotations.Api;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springside.modules.persistence.SearchFilter;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * @author Shen
 */
@Service
@Transactional(rollbackFor = BusinessException.class)
public class SupplierRiskImpl extends BaseOprService implements SupplierRiskService {

    @Autowired
    private SupplierRiskDao supplierRiskDao;
    @Autowired
    private SupplierInfoDao supplierInfoDao;

    @Override
    @Transactional
    public ApiResponseResult add(SupplierRisk supplierRisk) throws BusinessException {
        if(null == supplierRisk || null == supplierRisk.getBsSuppId()){
            return ApiResponseResult.failure("供应商ID为必填项");
        }
        int count = supplierRiskDao.countByBsSuppId(supplierRisk.getBsSuppId());
        if(count > 0){
            return ApiResponseResult.failure("供应商已存在");
        }
        //添加创建时间
        supplierRisk.setBsCreatedTime(new Date());
        //所有得分类型默认为1
        supplierRisk.setBsFeedbackType((supplierRisk.getBsFeedbackType() == 0) ? 1 : supplierRisk.getBsFeedbackType());
        supplierRisk.setBsPpmType((supplierRisk.getBsPpmType() == 0) ? 1 : supplierRisk.getBsPpmType());
        supplierRisk.setBsDeliveryType((supplierRisk.getBsDeliveryType() == 0) ? 1 : supplierRisk.getBsDeliveryType());
        supplierRisk.setBsInspectType((supplierRisk.getBsInspectType() == 0) ? 1 : supplierRisk.getBsInspectType());
        supplierRisk.setBsPaymentType((supplierRisk.getBsPaymentType() == 0) ? 1 : supplierRisk.getBsPaymentType());
        supplierRisk.setBsCpkType((supplierRisk.getBsCpkType() == 0) ? 1 : supplierRisk.getBsCpkType());
        supplierRisk.setBsDangerProType((supplierRisk.getBsDangerProType() == 0) ? 1 : supplierRisk.getBsDangerProType());
        supplierRisk.setBsApproveType((supplierRisk.getBsApproveType() == 0) ? 1 : supplierRisk.getBsApproveType());
        supplierRisk.setBsEhsType((supplierRisk.getBsEhsType() == 0) ? 1 : supplierRisk.getBsEhsType());

        supplierRiskDao.save(supplierRisk);
        return ApiResponseResult.success("新增成功！").data(supplierRisk);
    }

    @Override
    @Transactional
    public ApiResponseResult edit(SupplierRisk supplierRisk) throws BusinessException {
        if(null == supplierRisk || null == supplierRisk.getId()){
            return ApiResponseResult.failure("记录ID为必填项");
        }
        if(null == supplierRisk.getBsSuppId()){
            return ApiResponseResult.failure("供应商ID为必填项");
        }
        SupplierRisk o = supplierRiskDao.findOne(supplierRisk.getId());
        if(null == o){
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
        //1.添加修改时间及修改人
        supplierRisk.setId(o.getId());  //主键
        supplierRisk.setBsCreatedTime(o.getBsCreatedTime());
        supplierRisk.setBsVersion(o.getBsVersion());
        supplierRisk.setBsIsDel(o.getBsIsDel());
        supplierRisk.setBsModifiedTime(new Date());
        supplierRisk.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());

        //2.判断直升高风险类型是否达到高风险（type为5）,满足要求直升高风险
        if(supplierRisk.getBsDeliveryType() == 5){
            supplierRisk.setBsRiskLevel(5);   //风险等级
            //2.1修改供应商信息表
            SupplierInfo supplierInfo = supplierInfoDao.findOne(supplierRisk.getBsSuppId());
            supplierInfo.setBsRiskLevelSys(5);   //风险等级（系统）
            supplierInfo.setBsRiskTimeSys(new Date());
            supplierInfoDao.save(supplierInfo);
        }
        //3.修改供应商风险信息表
        supplierRiskDao.save(supplierRisk);
        return ApiResponseResult.success("修改成功！").data(supplierRisk);
    }

    @Override
    @Transactional
    public ApiResponseResult delete(Long id) throws BusinessException {
        SupplierRisk o = supplierRiskDao.findOne(id);
        if(null == o){
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
        if (o.getId() <= 0) {
            return ApiResponseResult.failure("没有操作权限");
        }
        o.setBsIsDel(BooleanStateEnum.TRUE.intValue());
        supplierRiskDao.save(o);
        return ApiResponseResult.success("删除成功！");
    }

    @Override
    @Transactional(readOnly = true)
    public ApiResponseResult getlist(Long bsSuppId, PageRequest pageRequest) throws BusinessException {
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BaseEnumConstants.FALSE));
        if(bsSuppId != null){
            filters.add(new SearchFilter("bsSuppId", SearchFilter.Operator.EQ, bsSuppId));
        }
        Specifications<SupplierRisk> spec = Specifications.where(super.and(filters, SupplierRisk.class));
        Page<SupplierRisk> page = supplierRiskDao.findAll(spec, pageRequest);
        return ApiResponseResult.success().data(Datagrid.create(page.getContent(), (int) page.getTotalElements(), pageRequest.getPageNumber() + 1, pageRequest.getPageSize()));
    }
}
