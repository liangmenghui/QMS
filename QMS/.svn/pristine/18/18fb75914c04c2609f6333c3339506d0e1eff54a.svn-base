<template>
   
    <div>
        <Row>
                <i-col>
                        <Form class="query_area" ref="formQuery" :model="formQuery" inline>
                            <Form-item v-if="menuData.perms.ADD">
                                <Button type="primary" @click="showAddDialog()" >新增样品</Button>
                            </Form-item>
                        </Form>
                    </i-col>
        </Row>
        <Row>
                <Modal v-model="dialog.modal_dialog4" title="" @on-ok="addSample" @on-cancel="cancel" >
                        <Form :model="formQuery" :ref="dialog.ruleForm" :rules="dialog.ruleForm" :label-width="80">
                    
                                    <Form-item prop="bsQty" label=" 样品数量：" style="width:40%">
                                           <InputNumber  :min="1" type="text" v-model="formQuery.bsQty" placeholder="样品数量" style="width: 300px" />
                                    </Form-item>
                                    <Form-item prop="bsCode" label="样品编码：">
                                        <Input type="text" v-model="formQuery.bsCode" placeholder="样品编码" style="width: 300px"/>
                                    </Form-item>
                    
                                    <Form-item prop="bsName" label="样品名称：">
                                        <Input type="text" v-model="formQuery.bsName" placeholder="样品名称" style="width: 300px"/>
                                    </Form-item>
                    
                                    <Form-item prop="bsReportTime" label="获取报告时间：">
                                        <DatePicker type="datetime" v-model="formQuery.bsReportTime" placeholder="Select date" style="width: 300px" ></DatePicker>
                                    </Form-item>

                                   <Form-item prop="bsComment" label="送测内容:">  
                                        <Input v-model="formQuery.bsComment" type="textarea" :autosize="{minRows: 2,maxRows: 7}" placeholder="填写送测内容" style="width: 300px"></Input>
                                  </Form-item>
                                  </Form>
                </Modal> 
            </Row>
        <Row>
            <i-col span="24">
                <Table :data="datagrid.data.rows" :columns="datagrid.columns"    stripe style="height:auto;"></Table>
                <div style="margin: 10px;overflow: hidden">
                    <div style="float: right;">
                        <Page :total="datagrid.data.total"  @on-change="changePage"  @on-page-size-change="chageSize" :current="1" :page-size="datagrid.queryParams.rows" :page-size-opts="datagrid.pagination"  show-total show-elevator show-sizer></Page>
                    </div>
                </div>
            </i-col>
        </Row>
  

   
    </div>
</template>
<script>
import {mapState} from 'vuex'
export default {
    created(){
        this.dialog.formItem.bsSampleStatrtTime=new Date();
       this.getReload();
    },
    computed:{
        ...mapState({
            menuData:state=>state.menuData  
        })
    },
    data() {
        return {
            start:0,
            end:15,
            tabs:1,
            dialog: {
                ruleForm: {
                        bsCostTime: [
                        { required: true, message: '用时不能为空', trigger: 'blur' }
                    ],
                    bsCode: [
                        { required: true, message: '请填写编码', trigger: 'blur' }
                    ],
                    bsName: [
                        { required: true, message: '请填写名称', trigger: 'blur' }
                    ],
                    bsQty: [
                        { required: true, message: '请填写数量', trigger: 'blur' }
                    ],
                    bsSampleTime: [
                        { required: true, message: '请填写登记时间', trigger: 'blur' }
                    ],
                    bsReportTime: [
                        { required: true, message: '请填写要报告时间', trigger: 'blur' }
                    ]
                },
                modal_dialog: false,
                modal_dialog2:false,
                modal_dialog4:false,
                formItem:{
                    bjsj:'',
                    id:"",
                    bsCode:"",
                    bsName:'',
                    bsSampleTime:'',
                    bsReportTime:'',
                    bsQty:'',
                    bsStatus:'',
                    bsComment:'',
                    arry:'',
                    item:[],

                }
                },
            formQuery: {
                eqName:'',
                testx:'',
                bsSampleStatrtTime:'',
                bsCostTime:'',

                bsCode: '',
                bsName: '',
                bsReportTime:'',
                bsSampleTime:'',
                bsComment:'',
                bsQty:''
            },
            Query: {
                bsName:'',
                bsCode:''
            },
            dict: {
                bsStatus:[{value: 0, name:'待测试'},{value: 1, name:'测试中'},{value: 2, name:'已完成'},{value: 3, name:'已中止'}]
            },
            
            datagrid: {
                queryParams:{
                    page:1,
                    rows:15,
                    pkParent:-1
                },
                pagination: [15, 50, 100],
                data: {rows:[],total:0,rows1:[]},
                columns: [
                    {
                        title: '样品编码',
                        key: 'bsCode'
                    },
                    {
                        title: '样品名称',
                        key: 'bsName'
                    },
                    {
                        title: '登记时间',
                        key: 'bsSampleTime'
                    },
                    {
                        title: '要求报告时间',
                        key: 'bsReportTime'
                    },
                    {
                        title: '样品数量',
                        key: 'bsQty'
                    },
                    {
                        title: '状态',
                        key: 'bsStatus',
                        render: (h, params) => {
                            return h('span', this.dict.bsStatus[params.row.bsStatus].name);
                        }
                    },
                    {
                        title: '测试内容',
                        key: 'bsComment'
                    },
                    {
                        title: '操作',
                        key: 'action',
                        render: (h, params) => {
                            let ary = [];
                            if(params.row.bsStatus==0 && this.menuData.perms.EDIT) {
                                ary.push(h('Button', {
                                    props: {
                                        type: 'primary',
                                        size: 'small'
                                    },
                                    style: {
                                        marginRight: '5px'
                                    },
                                    on: {
                                        click: () => {
                                            // this.showM(params)
                                            let query = params;
                                            this.$router.push({
                                            name: 'addSample',
                                            query: query
                                        });

                                        }
                                    }
                                }, '开始测试'));
                            }
                            if(params.row.bsStatus!=0 && this.menuData.perms.QUERY) {
                                ary.push(h('Button', {
                                    props: {
                                        type: 'primary',
                                        size: 'small'
                                    },
                                    style: {
                                        marginRight: '5px'
                                    },
                                    on: {
                                        click: () => {
                                            // this.showM(params)
                                            let query = params;
                                            this.$router.push({
                                            name: 'detail',
                                            query: query
                                        });

                                        }
                                    }
                                }, '详情'));
                            }
                            if(params.row.bsStatus==1 && this.menuData.perms.EDIT) {
                                ary.push(h('Button', {
                                    props: {
                                        type: 'primary',
                                        size: 'small'
                                    },
                                    style: {
                                        marginRight: '5px'
                                    },
                                    on: {
                                        click: () => {
                                            this.testcomp(params)
                                        }
                                    }
                                }, '测试完成'));
                            }
                            if(params.row.bsStatus==0 && this.menuData.perms.DELETE) {
                                ary.push(h('Button', {
                                    props: {
                                        type: 'primary',
                                        size: 'small'
                                    },
                                    style: {
                                        marginRight: '5px'
                                    },
                                    on: {
                                        click: () => {
                                            this.deleteSample(params)
                                        }
                                    }
                                }, '删除'));
                            }
                            if(params.row.bsStatus !=0 &&this.menuData.perms.ADD) {
                                ary.push(h('Button', {
                                    props: {
                                        type: 'primary',
                                        size: 'small'
                                    },
                                    style: {
                                        marginRight: '5px'
                                    },
                                    on: {
                                        click: () => {
                                            this.deleteSample(params)
                                        }
                                    }
                                }, '删除'));
                            }
                            return h('div', ary);
                        }
                    }
                ]
            },
        }
    },
    methods:{
        addSample(){
            this.api.sample.checkinSave(this.formQuery).then((res)=>{
                this.getReload();
                this.$Message.success("添加成功");
            });
        },
        getReload(){
            this.api.sample.selectSample().then((res) => {
                if(res.result) {
                    this.datagrid.data.rows1=this.datagrid.data.rows;
                    this.datagrid.data.rows = res.data.rows.slice(this.start,this.end);
                    this.datagrid.data.total=res.data.total;
                   }else {
                    this.$Message.error(res.msg);
                  }
                });
        },
        showAddDialog(){
            this.dialog.modal_dialog4=true;

        },
        showM(params){
            this.dialog.formItem.bsCode=params.row.bsCode;
            this.dialog.formItem.id=params.row.id;
            this.dialog.formItem.bsName=params.row.bsName;
            this.dialog.formItem.bsSampleTime=params.row.bsSampleTime;
            this.dialog.formItem.bsReportTime=params.row.bsReportTime;
            this.dialog.formItem.bsQty=params.row.bsQty;
            this.dialog.formItem.bsStatus=this.dict.bsStatus[params.row.bsStatus].name;
            this.dialog.formItem.bsComment=params.row.bsComment;
            this.dialog.modal_dialog = true;
            this.dialog.formItem.arry='';
            this.api.equipment.selectTest().then((res) =>{
                if(this.dialog.formItem.item ==null || this.dialog.formItem.item ==''){
                for(var i=0;i<res.data.total;i++){
                    this.dialog.formItem.item.push(res.data.rows[i]);
                }
                }
            });

        },
        
        testcomp(params){
            this.dialog.formItem.id=params.row.id;
            this.dialog.formItem.bsCode=params.row.bsCode;
            this.dialog.formItem.bsName=params.row.bsName;
            this.dialog.formItem.bsStatus=2;
            this.api.sample.testcomp(this.dialog.formItem).then((res)=>{
            this.getReload();
       });
        },
        cancel(){

        },
        deleteSample(params){
            this.Query.bsCode=params.row.bsCode;
            this.Query.bsName=params.row.bsName;
            this.$Modal.confirm({
                title: '提示信息',
                content: '<p>是否确定删除？</p>',
                loading: true,
                onOk: () => {
                    this.api.sample.deleteSample(this.Query).then((res)=>{
                        if(res.result) {
                            this.getReload();
                            this.$Message.info('删除成功');
                            this.$Modal.remove();
                        }else {
                            this.$Message.error("删除失败");
                        }
                    });
                }
            });
               
        },
        changePage (pageSize) {
                    this.start=(pageSize-1)*this.datagrid.queryParams.rows;
                    this.end=pageSize*this.datagrid.queryParams.rows;
                    this.getReload();
                },
        chageSize(pageSizeOpts){
                    this.datagrid.queryParams.rows=pageSizeOpts;
                    this.start=0;
                    this.end=pageSizeOpts;
                    this.getReload();
               }   
        
  }
    
}
</script>
