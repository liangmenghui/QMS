package com.unind.qms.web.basic.service.internal;

import com.unind.base.data.ApiResponseResult;
import com.unind.base.dbconnection.query.Datagrid;
import com.unind.base.domain.admin.enumeration.BaseEnumConstants;
import com.unind.base.provider.BaseOprService;
import com.unind.base.provider.BusinessException;
import com.unind.base.provider.context.SessionContextUtils;
import com.unind.fs.dao.file.FsFileDao;
import com.unind.fs.domain.file.FsFile;
import com.unind.qms.web.basic.dao.ExcelTempDao;
import com.unind.qms.web.basic.dao.FeedbackHandlerDao;
import com.unind.qms.web.basic.entity.ExcelTemp;
import com.unind.qms.web.basic.entity.FeedbackHandler;
import com.unind.qms.web.basic.service.ExcelTempService;
import com.unind.qms.web.basic.service.FeedbackHandlerService;
import com.unind.qms.web.basic.service.FileQmsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import org.springside.modules.persistence.SearchFilter;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

@Service
@Transactional(rollbackFor = BusinessException.class)
public class ExcelTempImpl extends BaseOprService implements ExcelTempService {
    @Autowired
    private ExcelTempDao excelTempDao;
    @Autowired
    private FileQmsService fileQmsService;

    @Transactional
    public ApiResponseResult add(int bsType, MultipartFile file) throws BusinessException {
        if (bsType != 0) {
            return ApiResponseResult.failure("模板类型不能为空");
        }
        int count = excelTempDao.countByBsType(bsType);
        if(count>0){
            return ApiResponseResult.failure("已存在此模板，请查找编辑");
        }
        FsFile fsFile = new FsFile();
        ApiResponseResult result = fileQmsService.upload(fsFile, file);
        if(!result.isResult()) {
            return result;
        }

        ExcelTemp excelTemp = new ExcelTemp();
        excelTemp.setBsType(bsType);
        excelTemp.setFsFileId(fsFile.getId());
        excelTemp.setBsCreatedTime(new Date());
        excelTemp.setPkCreatedBy(SessionContextUtils.getCurrentUser().getId());
        excelTempDao.save(excelTemp);

        return ApiResponseResult.success().data(excelTemp);
    }

    @Transactional
    public ApiResponseResult edit(Long id, MultipartFile file) throws BusinessException {
        if (null == id) {
            return ApiResponseResult.failure("记录ID为必填项");
        }
        ExcelTemp o = excelTempDao.findOne(id);
        if (null == o) {
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
        FsFile fsFile = new FsFile();
        ApiResponseResult result = fileQmsService.upload(fsFile, file);
        if(!result.isResult()) {
            return result;
        }

        o.setFsFileId(fsFile.getId());
        o.setBsModifiedTime(new Date());
        o.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
        excelTempDao.save(o);

        return ApiResponseResult.success("修改成功！").data(o);
    }

    @Transactional(readOnly = true)
    public ApiResponseResult getlist(Long id, PageRequest pageRequest) {
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BaseEnumConstants.FALSE));
        if(null != id){
            filters.add(new SearchFilter("id", SearchFilter.Operator.EQ, id));
        }
        Specifications<ExcelTemp> spec = Specifications.where(super.and(filters, ExcelTemp.class));
        Page<ExcelTemp> page = excelTempDao.findAll(spec, pageRequest);
        return ApiResponseResult.success().data(Datagrid.create(page.getContent(), (int) page.getTotalElements(), pageRequest.getPageNumber() + 1, pageRequest.getPageSize()));
    }
}
