package com.unind.qms.web.supplier.service.internal;

import com.unind.base.data.ApiResponseResult;
import com.unind.base.dbconnection.query.Datagrid;
import com.unind.base.domain.admin.enumeration.BooleanStateEnum;
import com.unind.base.provider.BaseOprService;
import com.unind.base.provider.BusinessException;
import com.unind.qms.web.supplier.dao.SupplierPromoteDao;
import com.unind.qms.web.supplier.entity.SupplierPromote;
import com.unind.qms.web.supplier.service.SupplierPromoteService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springside.modules.persistence.SearchFilter;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * 供应商改进提高项目
 * @author Shen
 */
@Service
@Transactional(rollbackFor = BusinessException.class)
public class SupplierPromoteImpl extends BaseOprService implements SupplierPromoteService {
    @Autowired
    private SupplierPromoteDao supplierPromoteDao;

    @Override
    @Transactional
    public ApiResponseResult add(SupplierPromote supplierPromote) throws BusinessException {
        if(supplierPromote.getBsItemsRecordId() == null){
            return ApiResponseResult.failure("审核项目记录ID为必填项！");
        }
        supplierPromote.setBsCreatedTime(new Date());
        supplierPromoteDao.save(supplierPromote);
        return ApiResponseResult.success("新增成功！").data(supplierPromote);
    }

    @Override
    @Transactional
    public ApiResponseResult edit(SupplierPromote supplierPromote) throws BusinessException {
        if(supplierPromote == null || supplierPromote.getId() == null){
            return ApiResponseResult.failure("记录ID为必填项！");
        }
        if(supplierPromote.getBsItemsRecordId() == null){
            return ApiResponseResult.failure("审核项目记录ID为必填项！");
        }
        SupplierPromote o = supplierPromoteDao.findOne(supplierPromote.getId());
        if(o == null){
            return ApiResponseResult.failure("记录ID不存在或已被删除！");
        }

        o.setBsContent(supplierPromote.getBsContent());
        o.setBsAction(supplierPromote.getBsAction());
        o.setBsDeadline(supplierPromote.getBsDeadline());
        o.setBsModifiedTime(new Date());
        supplierPromoteDao.save(o);
        return ApiResponseResult.success("修改成功！").data(o);
    }

    @Override
    @Transactional
    public ApiResponseResult delete(Long id) throws BusinessException {
        SupplierPromote supplierPromote = supplierPromoteDao.findOne(id);
        if(supplierPromote == null){
            return ApiResponseResult.failure("记录ID不存在或已被删除！");
        }
        if(supplierPromote.getId() <= 0){
            return ApiResponseResult.failure("没有操作权限！");
        }
        supplierPromote.setBsIsDel(BooleanStateEnum.TRUE.intValue());
        supplierPromoteDao.save(supplierPromote);
        return ApiResponseResult.success("删除成功！");
    }

    /**
     * 获取供应商改进提高项目
     * @param id
     * @param bsItemsRecordId
     * @param pageRequest
     * @return
     * @throws BusinessException
     */
    @Override
    @Transactional
    public ApiResponseResult getlist(Long id, Long bsItemsRecordId, PageRequest pageRequest) throws BusinessException {
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BooleanStateEnum.FALSE.intValue()));
        if(id != null){
            filters.add(new SearchFilter("id", SearchFilter.Operator.EQ, id));
        }
        if(bsItemsRecordId != null){
            filters.add(new SearchFilter("bsItemsRecordId", SearchFilter.Operator.EQ, bsItemsRecordId));
        }
        Specification<SupplierPromote> spec = Specifications.where(super.and(filters, SupplierPromote.class));
        Page<SupplierPromote> page = supplierPromoteDao.findAll(spec, pageRequest);
        return ApiResponseResult.success().data(Datagrid.create(page.getContent(), (int) page.getTotalElements(), pageRequest.getPageNumber() + 1, pageRequest.getPageSize()));
    }
}
