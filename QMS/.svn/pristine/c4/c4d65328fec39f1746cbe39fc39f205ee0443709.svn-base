<template>
    <div>
        <Row>
            <i-col>
                <Form class="query_area" ref="formQuery" :model="formQuery" inline>
                    <Form-item prop="bsCode">
                        <Input type="text" v-model="formQuery.bsCode" placeholder="编码" />
                    </Form-item>
                    <Form-item prop="bsName">
                        <Input type="text" v-model="formQuery.bsName" placeholder="名称" />
                    </Form-item>
                    <Form-item>
                        <Button type="primary" @click="handleSubmit('formQuery')">查 询</Button>
                    </Form-item>
                    <Form-item>
                        <Button type="primary" @click="showAddDialog()">新 增</Button>
                    </Form-item>
                </Form>
            </i-col>
        </Row>
        <Row>
             <i-col span="24"><b>接口配置表头</b></i-col>
        </Row>
        <Row>
            <i-col span="24">
                <Table ref="tableHeader" :data="datagrid.data.rows" highlight-row @on-current-change="onCurrentSelect" :columns="datagrid.columns" stripe height="220"></Table>
                <div style="margin: 10px;overflow: hidden">
                    <div style="float: right;">
                        <Page :total="datagrid.data.total" :current="1" :page-size="datagrid.queryParams.rows" :page-size-opts="datagrid.pagination" @on-change="changePage" show-total show-elevator show-sizer></Page>
                    </div>
                </div>
            </i-col>
        </Row>
        <Row>
             <i-col span="24"><b>接口参数明细</b></i-col>
        </Row>
        <Row>
            <i-col span="24">
                <Table :data="datagrid.subdata.data.rows" :columns="datagrid.subdata.columns" stripe height="325"></Table>
            </i-col>
        </Row>
        <Modal v-model="dialog.modal_dialog" title="" @on-ok="ok" @on-cancel="cancel" width="800" >
            <p>
                <Form :model="formItem" ref="dialog.ruleForm" :rules="dialog.ruleForm" :label-width="80">
                <Row>
                    <Input v-model="formItem.id" type="hidden"></Input>
                    <i-col span="12">
                    <Form-item label="编码" prop="bsCode">
                        <Input v-model="formItem.bsCode" placeholder="请输入"></Input>
                    </Form-item>
                    </i-col>
                    <i-col span="12">
                    <Form-item label="名称" prop="bsName">
                        <Input v-model="formItem.bsName" placeholder="请输入"></Input>
                    </Form-item>
                    </i-col>
                </Row>
                <Row>
                    <i-col span="12">
                    <Form-item label="存储过程名" prop="bsProcName">
                        <Input v-model="formItem.bsProcName" placeholder="请输入"></Input>
                    </Form-item>
                    </i-col>
                    <i-col span="12">
                    <Form-item label="函数名" prop="bsFunctionName">
                        <Input v-model="formItem.bsFunctionName" placeholder="请输入"></Input>
                    </Form-item>
                    </i-col>
                </Row>
                <Row>
                    <i-col span="12">
                    <Form-item label="版本号" prop="bsRevision">
                        <Input v-model="formItem.bsRevision" placeholder="请输入"></Input>
                    </Form-item>
                    </i-col>
                    <i-col span="12">
                    <Form-item label="启用状态" prop="bsEnableState">
                        <Select v-model="formItem.bsEnableState">
                            <Option :value="1">启 用</Option>
                            <Option :value="0">停 用</Option>
                        </Select>
                    </Form-item>
                    </i-col>
                </Row>  
                <Row>
                    <i-col span="24">
                    <Form-item label="停用信息" prop="bsPublishDes" >
                        <Input v-model="formItem.bsPublishDes" type="textarea" placeholder="请输入..."></Input>
                    </Form-item>
                    </i-col>
                </Row>
                <Row>
                    <i-col span="24">
                    <Form-item label="备注">
                        <Input v-model="formItem.bsComment" type="textarea" placeholder="请输入..."></Input>
                    </Form-item>
                    </i-col>
                </Row>
                <Row>
                    <i-col span="12">
                        <Button type="primary" size="small" @click="addRow">新增行</Button>&nbsp;&nbsp;
                    </i-col>
                    <i-col span="12">
                    </i-col>
                </Row>
                <Row>
                    <i-col span="24">
                        <Table ref="dialogTable" :data="dialog.datagrid.data.rows" highlight-row :columns="dialog.datagrid.columns" stripe height="325"></Table>
                    </i-col>
                </Row>
                </Form>
            </p>
        </Modal>
    </div>
</template>
<script>
import {mapState} from 'vuex';
import expandRow from './table-expand.vue';
export default {
    components: { expandRow },
    data() {
        return {
            formQuery: {
                bsCode: '',
                bsName: ''
            },
            formItem: {
            },
            dialog: {
                modal_dialog: false,
                ruleForm: {
                    bsCode: [
                        { required: true, message: '请填写编码', trigger: 'blur' }
                    ],
                    bsName: [
                        { required: true, message: '请填写名称', trigger: 'blur' }
                    ]
                },
                datagrid: {
                    data: {rows:[],total:0},
                    columns: [{
                        type: 'expand',
                        key: 'bsCode',
                        align: 'center',
                        render: (h, params) => {
                            return h(expandRow, {
                                props: {
                                    data:params
                                },
                                on: {
                                    returnval: (value) => {
                                        let index = value.index;
                                        let row = value.row;
                                        Object.assign(this.dialog.datagrid.data.rows[index], value.row);
                                    },
                                    expand: (value) => {
                                        let index = value.index;
                                        this.$refs.dialogTable.toggleExpand(index);
                                    }
                                }
                            })
                        }
                    },{
                        title: '参数编码',
                        key: 'bsCode',
                        align: 'center'
                    },{
                        title: '参数名称',
                        key: 'bsName',
                        align: 'center'
                    },{
                        title: '参数值',
                        key: 'bsValue',
                        align: 'center'
                    },{
                        title: '序号',
                        key: 'bsSortNo',
                        align: 'center'
                    },{
                        title: '参数类型',
                        key: 'bsParameterType',
                        align: 'center'
                    },{
                        title: '数据类型',
                        key: 'bsDataType',
                        align: 'center'
                    },{
                        title: '是否必须',
                        key: 'bsIsRequired',
                        align: 'center',
                        render: (h, params) => {
                            let txt;
                            if(params.row.bsIsRequired==1) {
                                txt = "是";
                            }else {
                                txt = "否";
                            }
                            return h('span', txt);
                        }
                    },{
                        title: '操作',
                        key: 'action',
                        width: 150,
                        align: 'center',
                        render: (h, params) => {
                            return h('div', [
                                h('Button', {
                                    props: {
                                        type: 'error',
                                        size: 'small'
                                    },
                                    on: {
                                        click: () => {
                                            this.removeRow(params)
                                        }
                                    }
                                }, '移除行')
                            ]);
                        }
                    }]
                }
            },
            datagrid: {
                queryParams:{
                    page:1,
                    rows:25
                },
                pagination: [25, 50, 100],
                data: {rows:[],total:0},
                columns: [
                    {
                        title: '编码',
                        key: 'bsCode',
                        align: 'center'
                    },
                    {
                        title: '名称',
                        key: 'bsName',
                        align: 'center'
                    },
                    {
                        title: '存储过程名',
                        key: 'bsProcName',
                        align: 'center'
                    },
                    {
                        title: '函数名',
                        key: 'bsFunctionName',
                        align: 'center'
                    },
                    {
                        title: '接口版本',
                        key: 'bsRevision',
                        align: 'center'
                    },
                    {
                        title: '启用状态',
                        key: 'bsEnableState',
                        align: 'center',
                        render: (h, params) => {
                            if(params.row.bsEnableState==1) {
                                return h('div', '启用');
                            }
                            return h('div', '停用');
                        }
                    },
                    {
                        title: '删除标识',
                        key: 'bsIsDel',
                        render: (h, params) => {
                            let text;
                            if(params.row.bsIsDel==0) {
                                text = "-";
                            }else if(params.row.bsIsDel==1) {
                                text = "已删除";
                            }
                            return h('span', text)
                        }
                    },
                    {
                        title: '操作',
                        key: 'action',
                        width: 180,
                        render: (h, params) => {
                            let ary = [];
                            //if(this.menuData.perms.EDIT) {
                                ary.push(h('Button', {
                                    props: {
                                        type: 'primary',
                                        size: 'small'
                                    },
                                    style: {
                                        marginRight: '5px'
                                    },
                                    on: {
                                        click: () => {
                                            this.showEditDialog(params)
                                        }
                                    }
                                }, '编辑'));
                            //}
                            //if(this.menuData.perms.DELETE) {
                                ary.push(h('Button', {
                                    props: {
                                        type: 'error',
                                        size: 'small'
                                    },
                                    style: {
                                        marginRight: '5px'
                                    },
                                    on: {
                                        click: () => {
                                            this.delete(params)
                                        }
                                    }
                                }, '删除'))
                            //}
                                ary.push(h('Button', {
                                    props: {
                                        type: 'primary',
                                        size: 'small'
                                    },
                                    on: {
                                        click: () => {
                                            this.testInvoke(params)
                                        }
                                    }
                                }, '测试'))
                            return h('div', ary);
                        }
                    }
                ],
                subdata:{
                    data: {rows:[],total:0},
                    columns: [{
                        title: '参数名',
                        key: 'bsCode',
                        align: 'center'
                    },{
                        title: '描述',
                        key: 'bsName',
                        align: 'center'
                    },{
                        title: '参数值',
                        key: 'bsValue',
                        align: 'center'
                    },{
                        title: '序号',
                        key: 'bsSortNo',
                        align: 'center'
                    },{
                        title: '参数类型',
                        key: 'bsParameterType',
                        align: 'center'
                    },{
                        title: '数据类型',
                        key: 'bsDataType',
                        align: 'center'
                    },{
                        title: '是否必须',
                        key: 'bsIsRequired',
                        align: 'center',
                        render: (h, params) => {
                            let txt;
                            if(params.row.bsIsRequired==1) {
                                txt = "是";
                            }else {
                                txt = "否";
                            }
                            return h('span', txt);
                        }
                    }]
                }
            }
        }
    },
    created(){
    },
    computed:{
        ...mapState({
            menuData:state=>state.menuData  
        })
    },
    methods: {
        onCurrentSelect(currentRow, oldCurrentRow) {
            this.getSubData(currentRow);
        },
        handleSubmit(name) {
            this.getData();
        },
        getSubData(currentRow) {
            Object.assign(this.datagrid.subdata.data, {rows:currentRow.details, total:currentRow.details.length});
            // console.log(JSON.stringify(this.datagrid.subdata.data));
        },
        getData() {
            Object.assign(this.formQuery, this.datagrid.queryParams);
            // console.log(this.formQuery);
            this.api.erp.apiconfig.getlist(this.formQuery).then((res) => {
                if(res.result) {
                    this.datagrid.data = res.data;
                }else {
                    this.$Message.error(res.msg);
                }
            });
        },
        reloadData() {
            this.datagrid.data = this.getData();
        },
        changePage (page) {
            this.datagrid.queryParams.page = page;
            this.datagrid.data = this.getData();
        },
        edit(params) {
            this.api.erp.apiconfig.edit(params.row).then((res)=>{
                if(res.result) {
                    //refresh
                    this.reloadData();
                }else {
                    this.$Message.error(res.msg);
                }
            });
        },
        delete(params) {
            this.$Modal.confirm({
                title: '提示信息',
                content: '<p>是否确定删除？</p>',
                loading: true,
                onOk: () => {
                    this.api.erp.apiconfig.delete({id:params.row.id}).then((res)=>{
                        if(res.result) {
                            //refresh
                            this.reloadData();
                            this.$Message.info('删除成功');
                            this.$Modal.remove();
                        }else {
                            this.$Message.error(res.msg);
                        }
                    });
                }
            });
        },
        showAddDialog() {
            this.dialog.modal_dialog = true;
            this.formItem = {};

            Object.assign(this.dialog.datagrid.data, {rows:[], total:0});
        },
        showEditDialog(params) {
            this.dialog.modal_dialog = true;
            let r = params.row;
            this.formItem = {id:r.id,bsCode:r.bsCode,bsName:r.bsName,bsProcName:r.bsProcName,bsFunctionName:r.bsFunctionName,bsRevision:r.bsRevision,bsEnableState:r.bsEnableState,bsPublishDes:r.bsPublishDes,bsComment:r.bsComment};
            
            Object.assign(this.dialog.datagrid.data, JSON.parse(JSON.stringify({rows:r.details, total:r.details.length})));
        },
        ok () {
            this.formItem.details = this.dialog.datagrid.data.rows;
            let str = JSON.stringify(this.dialog.datagrid.data.rows);
            // console.log("===>"+str);
            if(typeof(this.formItem.id)!=undefined && typeof(this.formItem.id)=="number") {
                this.$refs["dialog.ruleForm"].validate((valid) => {
                     if (valid) {
                        this.api.erp.apiconfig.edit(this.formItem).then((res) => {
                            if(res.result) {
                                //refresh
                                this.reloadData();
                            }else {
                                this.$Message.error(res.msg);
                            }
                        });
                     }
                });
            }else {
                this.$refs["dialog.ruleForm"].validate((valid) => {
                    if (valid) {
                        this.api.erp.apiconfig.add(this.formItem).then((res) => {
                            if(res.result) {
                                //refresh
                                this.reloadData();
                            }else {
                                this.$Message.error(res.msg);
                            }
                        });
                    }
                });
            }
        },
        cancel () {
            
        },
        addRow() {
            this.dialog.datagrid.data.total = this.dialog.datagrid.data.total+1;
            this.dialog.datagrid.data.rows.push({bsCode:"",bsName:"",bsProcName:"",bsFunctionName:"",bsValue:"",bsSortNo:"",bsParameterType:"",bsDataType:""});
        },
        removeRow(params) {
            this.dialog.datagrid.data.rows.splice(params.index, 1);
        },
        testInvoke(params) {
            //接口调用测试
            let data = {};
            let rows = params.row.details;
            let row;
            for(let i =0; i < rows.length; i++) {
                row = rows[i];
                if(row.bsValue) {
                    data[row.bsCode] = row.bsValue;
                }else {
                    data[row.bsCode] = "";
                }
            }
            // console.log(JSON.stringify(data)+",revision:"+params.row.bsRevision);
            this.api.erp.apiconfig.test(data, params.row.bsRevision, params.row.bsCode).then((res) => {
                if(res.result) {
                    this.$Message.info(res.msg);
                }else {
                    this.$Message.error(res.msg);
                }
            });;
        }
    }
}
</script>
