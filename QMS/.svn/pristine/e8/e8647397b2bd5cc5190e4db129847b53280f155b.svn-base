package com.unind.qms.web.approved.service.internal;

import com.unind.base.data.ApiResponseResult;
import com.unind.base.dbconnection.query.Datagrid;
import com.unind.base.domain.admin.enumeration.BaseEnumConstants;
import com.unind.base.domain.admin.enumeration.BooleanStateEnum;
import com.unind.base.provider.BaseOprService;
import com.unind.base.provider.BaseService;
import com.unind.base.provider.BusinessException;
import com.unind.base.provider.context.SessionContextUtils;
import com.unind.qms.web.approved.dao.ApprovedTermsDao;
import com.unind.qms.web.approved.entity.ApprovedTerms;
import com.unind.qms.web.approved.service.ApprovedTermsService;
import io.swagger.annotations.Api;
import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import org.springside.modules.persistence.SearchFilter;

import java.io.File;
import java.io.FileInputStream;
import java.util.*;

@Service
@Transactional(rollbackFor = BusinessException.class)
public class ApprovedTermsImpl extends BaseOprService implements ApprovedTermsService {
    @Autowired
    private ApprovedTermsDao approvedTermsDao;

    @Transactional
    public ApiResponseResult add(ApprovedTerms approvedTerms) throws BusinessException {
        if (StringUtils.isEmpty(approvedTerms.getBsNo()) || StringUtils.isEmpty(approvedTerms.getBsNo().trim())) {
            return ApiResponseResult.failure("条款号不能为空");
        }
		if (StringUtils.isEmpty(approvedTerms.getBsName()) || StringUtils.isEmpty(approvedTerms.getBsName().trim())) {
            return ApiResponseResult.failure("条款名称不能为空");
        }
        if (StringUtils.isEmpty(approvedTerms.getBsContent()) || StringUtils.isEmpty(approvedTerms.getBsContent().trim())) {
            return ApiResponseResult.failure("条款内容不能为空");
        }
        if (StringUtils.isEmpty(approvedTerms.getBsStandard()) || StringUtils.isEmpty(approvedTerms.getBsStandard().trim())) {
            return ApiResponseResult.failure("评分标准不能为空");
        }
//        int counts = approvedTermsDao.countByBsNo(approvedTerms.getBsNo());
//        if (counts > 0) {
//            return ApiResponseResult.failure("条款已存在");
//        }
        approvedTerms.setBsNo(approvedTerms.getBsNo().trim());
        approvedTerms.setBsType(approvedTerms.getBsType());
        approvedTerms.setBsName(approvedTerms.getBsName());
        approvedTerms.setBsContent(approvedTerms.getBsContent());
        approvedTerms.setBsStandard(approvedTerms.getBsStandard());
        approvedTerms.setBsRemark(approvedTerms.getBsRemark());

        approvedTerms.setBsCreatedTime(new Date());
		approvedTerms.setPkCreatedBy(SessionContextUtils.getCurrentUser().getId());
//        approvedTerms.setPkCreatedBy(Long.parseLong("1"));
        approvedTermsDao.save(approvedTerms);
        return ApiResponseResult.success("新增成功！").data(approvedTerms);
    }

    @Transactional
    public ApiResponseResult edit(ApprovedTerms approvedTerms) throws BusinessException {
        if (null == approvedTerms || null == approvedTerms.getId()) {
            return ApiResponseResult.failure("记录ID为必填项");
        }
        if (StringUtils.isEmpty(approvedTerms.getBsNo()) || StringUtils.isEmpty(approvedTerms.getBsNo().trim())) {
            return ApiResponseResult.failure("条款号不能为空");
        }
		if (StringUtils.isEmpty(approvedTerms.getBsName()) || StringUtils.isEmpty(approvedTerms.getBsName().trim())) {
            return ApiResponseResult.failure("条款名称不能为空");
        }
        if (StringUtils.isEmpty(approvedTerms.getBsContent()) || StringUtils.isEmpty(approvedTerms.getBsContent().trim())) {
            return ApiResponseResult.failure("条款内容不能为空");
        }
        if (StringUtils.isEmpty(approvedTerms.getBsStandard()) || StringUtils.isEmpty(approvedTerms.getBsStandard().trim())) {
            return ApiResponseResult.failure("评分标准不能为空");
        }
        ApprovedTerms o = approvedTermsDao.findOne(approvedTerms.getId());
        if (null == o) {
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
//        if (!StringUtils.equals(approvedTerms.getBsNo().trim(), o.getBsNo())) {
//            int counts = approvedTermsDao.countByBsNo(approvedTerms.getBsNo());
//            if (counts > 0) {
//                return ApiResponseResult.failure("条款号不能重复");
//            }
            o.setBsNo(approvedTerms.getBsNo().trim());
//        }
        o.setBsType(approvedTerms.getBsType());
        o.setBsName(approvedTerms.getBsName());
        o.setBsContent(approvedTerms.getBsContent());
        o.setBsStandard(approvedTerms.getBsStandard());
        o.setBsRemark(approvedTerms.getBsRemark());
        o.setBsContentEn(approvedTerms.getBsContentEn());
        o.setBsStandardEn(approvedTerms.getBsStandardEn());
        o.setBsScoreLine(approvedTerms.getBsScoreLine());

        o.setBsModifiedTime(new Date());
		o.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
//        o.setPkModifiedBy(Long.parseLong("1"));
        approvedTermsDao.save(o);
        return ApiResponseResult.success("修改成功！");
    }

    @Transactional
    public ApiResponseResult delete(Long id) throws BusinessException {
        ApprovedTerms o = approvedTermsDao.findOne(id);
        if (null == o) {
            return ApiResponseResult.failure("记录ID不存在或已被删除").status("error1");
        }
        if (o.getId() <= 0) {
            return ApiResponseResult.failure("没有操作权限");
        }
        o.setBsIsDel(BooleanStateEnum.TRUE.intValue());
        approvedTermsDao.save(o);
        return ApiResponseResult.success("删除成功！");
    }

    @Transactional(readOnly = true)
    public ApiResponseResult getlist(String keyWord, Long itemsId, Long itemsRecordId, Integer bsType, PageRequest pageRequest) {
        if(null != itemsId&&null != itemsRecordId){
            Map<String, Object> param = new HashMap<String, Object>();
            param.put("itemsId", itemsId);
            param.put("itemsRecordId", itemsRecordId);
            StringBuffer sqlbf1 = new StringBuffer();
            sqlbf1.append(" SELECT a.*,(SELECT bs_score FROM t_approved_terms_score WHERE bs_items_recore_id=:itemsRecordId and bs_terms_id=a.id) bs_score");
            sqlbf1.append(" ,(SELECT bs_desc FROM t_approved_terms_score WHERE bs_items_recore_id=:itemsRecordId and bs_terms_id=a.id) bs_desc");
            sqlbf1.append(" ,(SELECT id FROM t_approved_terms_score WHERE bs_items_recore_id=:itemsRecordId and bs_terms_id=a.id) score_id");
            sqlbf1.append(" FROM t_approved_terms a LEFT JOIN t_approved_items_map b ON a.id = b.bs_terms_id");
//            sqlbf1.append(" LEFT JOIN t_approved_terms_score c ON a.id = c.bs_terms_id");
            sqlbf1.append(" WHERE b.bs_items_id=:itemsId and a.bs_is_del='0' and b.bs_is_del='0' ORDER BY a.bs_no ASC");
            List<Map<String, Object>> recorderList = super.findBySql(sqlbf1.toString(), param);
            return ApiResponseResult.success().data(recorderList);
        }else{
            List<SearchFilter> filters = new ArrayList<SearchFilter>();
            filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BooleanStateEnum.FALSE.intValue()));
            if (null != bsType) {
                filters.add(new SearchFilter("bsType", SearchFilter.Operator.EQ, bsType));
            }
            List<SearchFilter> filters1 = new ArrayList<SearchFilter>();
            if(StringUtils.isNotEmpty(keyWord)){
                filters1.add(new SearchFilter("bsNo", SearchFilter.Operator.LIKE, keyWord));
                filters1.add(new SearchFilter("bsName", SearchFilter.Operator.LIKE, keyWord));
            }

            Specifications<ApprovedTerms> spec = Specifications.where(super.and(filters, ApprovedTerms.class));
            Specifications<ApprovedTerms> spec1 = spec.and(super.or(filters1, ApprovedTerms.class));
            Page<ApprovedTerms> page = approvedTermsDao.findAll(spec1, pageRequest);
            return ApiResponseResult.success().data(Datagrid.create(page.getContent(), (int) page.getTotalElements(), pageRequest.getPageNumber() + 1, pageRequest.getPageSize()));
        }
    }

    @Transactional
    public ApiResponseResult importExcel(MultipartFile file) throws Exception{
        if(file == null){
            return ApiResponseResult.failure("上传文件不存在！");
        }

        Workbook wb = null;
        String fileName = file.getOriginalFilename();
        //判断excel版本
        if(fileName.matches("^.+\\.(?i)(xlsx)$")){
            //xlsx版本
            wb = new XSSFWorkbook(file.getInputStream());
        }else{
            //xls版本
            wb = new HSSFWorkbook(new FileInputStream((File) file));
        }

        List<ApprovedTerms> approvedTermsList = new ArrayList<ApprovedTerms>();
        Sheet sheet = wb.getSheetAt(0);  //获取第一张表
        for(int i = 1; i < sheet.getLastRowNum(); i++){
            ApprovedTerms approvedTerms = new ApprovedTerms();
            Row row = sheet.getRow(i);
            Integer type = new Double(row.getCell(0).getNumericCellValue()).intValue();    //类型
            //选取类型存在的有用数据
            if(type == null || type == 0){
                continue;
            }
            String no = row.getCell(1).getStringCellValue();      //编号
            String name = row.getCell(2).getStringCellValue();    //名称
            String content = row.getCell(3).getStringCellValue(); //内容
            String remark = row.getCell(4).getStringCellValue();  //备注
            String standard = row.getCell(5).getStringCellValue();  //评分标准
            String contentEn = row.getCell(6).getStringCellValue();  //评分标准（英文）
            String standardEn = row.getCell(7).getStringCellValue();  //评分标准（英文）

            //根据类型和编号查找条款，如果存在则修改条款，不存在则添加条款
            List<SearchFilter> filters = new ArrayList<SearchFilter>();
            filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BooleanStateEnum.FALSE.intValue()));
            filters.add(new SearchFilter("bsNo", SearchFilter.Operator.EQ, no));
            filters.add(new SearchFilter("bsType", SearchFilter.Operator.EQ, type));
            filters.add(new SearchFilter("bsName", SearchFilter.Operator.EQ, name));
            Specification<ApprovedTerms> spec = Specifications.where(super.and(filters, ApprovedTerms.class));
            ApprovedTerms o = approvedTermsDao.findOne(spec);
            if(o != null){
                //修改
                o.setBsType(type);
                o.setBsNo(no);
                o.setBsName(name);
                o.setBsContent(content);
                o.setBsRemark(remark);
                o.setBsStandard(standard);
                o.setBsContentEn(contentEn);
                o.setBsStandardEn(standardEn);
                o.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
                o.setBsModifiedTime(new Date());
                approvedTermsDao.save(o);
            }else{
                //添加
                approvedTerms.setBsType(type);
                approvedTerms.setBsNo(no);
                approvedTerms.setBsName(name);
                approvedTerms.setBsContent(content);
                approvedTerms.setBsRemark(remark);
                approvedTerms.setBsStandard(standard);
                approvedTerms.setBsContentEn(contentEn);
                approvedTerms.setBsStandardEn(standardEn);
                approvedTerms.setPkCreatedBy(SessionContextUtils.getCurrentUser().getId());
                approvedTerms.setBsCreatedTime(new Date());
                approvedTermsList.add(approvedTerms);
            }
        }
        approvedTermsDao.save(approvedTermsList);
        return ApiResponseResult.success("Excel表导入成功！");
    }
}
