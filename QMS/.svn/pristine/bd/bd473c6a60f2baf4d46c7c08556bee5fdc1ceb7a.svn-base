package com.unind.qms.web.basic.service.internal;

import com.unind.base.data.ApiResponseResult;
import com.unind.base.dbconnection.query.Datagrid;
import com.unind.base.domain.admin.enumeration.BaseEnumConstants;
import com.unind.base.domain.admin.enumeration.BooleanStateEnum;
import com.unind.base.provider.BaseOprService;
import com.unind.base.provider.BaseService;
import com.unind.base.provider.BusinessException;
import com.unind.base.provider.context.SessionContextUtils;
import com.unind.qms.enumeration.BasicStateEnum;
import com.unind.qms.web.basic.dao.FeedbackInfoDao;
import com.unind.qms.web.basic.dao.FeedbackInfoFileDao;
import com.unind.qms.web.basic.dao.TodoInfoDao;
import com.unind.qms.web.basic.entity.FeedbackInfo;
import com.unind.qms.web.basic.entity.FeedbackInfoFile;
import com.unind.qms.web.basic.service.FeedbackInfoService;
import com.unind.qms.web.product.dao.ProductInfoDao;
import com.unind.qms.web.product.entity.ProductInfo;
import com.unind.qms.web.risk.dao.ProductRiskDao;
import com.unind.qms.web.risk.dao.SupplierRiskDao;
import com.unind.qms.web.risk.entity.ProductRisk;
import com.unind.qms.web.risk.entity.SupplierRisk;
import com.unind.qms.web.supplier.dao.SupplierInfoDao;
import com.unind.qms.web.supplier.entity.SupplierInfo;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springside.modules.persistence.SearchFilter;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
@Transactional(rollbackFor = BusinessException.class)
public class FeedbackInfoImpl extends BaseOprService implements FeedbackInfoService {
    @Autowired
    private FeedbackInfoDao feedbackInfoDao;
    @Autowired
    private TodoInfoDao todoInfoDao;
    @Autowired
    private ProductInfoDao productInfoDao;
    @Autowired
    private SupplierInfoDao supplierInfoDao;
    @Autowired
    private ProductRiskDao productRiskDao;
    @Autowired
    private SupplierRiskDao supplierRiskDao;
    @Autowired
    private FeedbackInfoFileDao feedbackInfoFileDao;

    @Transactional
    public ApiResponseResult add(FeedbackInfo feedbackInfo, String fileIdStr) throws BusinessException {
        if (null == feedbackInfo.getBsSuppId()) {
            return ApiResponseResult.failure("供应商不能为空");
        }
//        if (null == feedbackInfo.getBsPrId()) {
//            return ApiResponseResult.failure("产品不能为空");
//        }

        feedbackInfo.setBsStep(1);
        feedbackInfo.setBsStatus(BasicStateEnum.FEEDBACK_START.intValue());
        feedbackInfo.setBsCreatedTime(new Date());
		feedbackInfo.setPkCreatedBy(SessionContextUtils.getCurrentUser().getId());
        feedbackInfoDao.save(feedbackInfo);

        //添加客诉文件
        if(StringUtils.isNotEmpty(fileIdStr)){
            String[] fileIdArr = fileIdStr.split(",");
            if(fileIdArr.length>0){
                for(String fileId:fileIdArr){
                    FeedbackInfoFile feedbackInfoFile = new FeedbackInfoFile();
                    feedbackInfoFile.setBsFeedbackId(feedbackInfo.getId());
                    feedbackInfoFile.setFsFileId(Long.valueOf(fileId));
                    feedbackInfoFile.setBsCreatedTime(new Date());
                    feedbackInfoFileDao.save(feedbackInfoFile);
                }
            }
        }

        //客诉相关的供应商和产品直升高风险
        //1.修改供应商风险信息表
        List<SearchFilter> filtersSupp = new ArrayList<SearchFilter>();
        filtersSupp.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BooleanStateEnum.FALSE.intValue()));
        filtersSupp.add(new SearchFilter("bsSuppId", SearchFilter.Operator.EQ, feedbackInfo.getBsSuppId()));
        Specifications<SupplierRisk> specSupp = Specifications.where(super.and(filtersSupp, SupplierRisk.class));
        SupplierRisk supplierRisk = supplierRiskDao.findOne(specSupp);
        if(supplierRisk != null){
            supplierRisk.setBsFeedbackType(5);
            supplierRisk.setBsRiskLevel(5);
            supplierRisk.setBsModifiedTime(new Date());
            supplierRisk.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
            supplierRiskDao.save(supplierRisk);
            //2.修改供应商信息表
            SupplierInfo supplierInfo = supplierInfoDao.findOne(feedbackInfo.getBsSuppId());
            if(supplierInfo != null){
                supplierInfo.setBsRiskLevelSys(5);
                supplierInfo.setBsRiskTimeSys(new Date());
                supplierInfoDao.save(supplierInfo);
            }
        }

        //3.修改产品风险信息表
        if(feedbackInfo.getBsPrId() != null){
            List<SearchFilter> filtersPro = new ArrayList<SearchFilter>();
            filtersPro.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BooleanStateEnum.FALSE.intValue()));
            filtersPro.add(new SearchFilter("bsPrId", SearchFilter.Operator.EQ, feedbackInfo.getBsPrId()));
            Specifications<ProductRisk> specPro = Specifications.where(super.and(filtersPro, ProductRisk.class));
            ProductRisk productRisk = productRiskDao.findOne(specPro);
            if(productRisk != null){
                productRisk.setBsFeedbackType(5);
                productRisk.setBsRiskLevel(5);
                productRisk.setBsModifiedTime(new Date());
                productRisk.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
                productRiskDao.save(productRisk);
                //4.修改产品信息表
                ProductInfo productInfo = productInfoDao.findOne(feedbackInfo.getBsPrId());
                if(productInfo != null){
                    productInfo.setBsRiskLevelSys(5);
                    productInfo.setBsRiskTimeSys(new Date());
                    productInfoDao.save(productInfo);
                }
            }
        }

        return ApiResponseResult.success("新增成功！").data(feedbackInfo);
    }

    @Transactional
    public ApiResponseResult edit(FeedbackInfo feedbackInfo) throws BusinessException {
        if (null == feedbackInfo || null == feedbackInfo.getId()) {
            return ApiResponseResult.failure("记录ID为必填项");
        }
        if (null == feedbackInfo.getBsSuppId()) {
            return ApiResponseResult.failure("供应商不能为空");
        }
//        if (null == feedbackInfo.getBsPrId()) {
//            return ApiResponseResult.failure("产品不能为空");
//        }
        FeedbackInfo o = feedbackInfoDao.findOne(feedbackInfo.getId());
        if (null == o) {
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
//        if (!StringUtils.equals(approvedFlow.getBsName().trim(), o.getBsName())) {
//            int counts = approvedFlowDao.countByBsName(approvedFlow.getBsName());
//            if (counts > 0) {
//                return ApiResponseResult.failure("项目名称不能重复");
//            }
//            o.setBsName(approvedFlow.getBsName().trim());
//        }
        feedbackInfo.setBsUserId(o.getBsUserId());
        feedbackInfo.setBsCreatedTime(o.getBsCreatedTime());
        feedbackInfo.setPkCreatedBy(o.getPkCreatedBy());
        feedbackInfo.setBsVersion(o.getBsVersion());
        feedbackInfo.setBsIsDel(o.getBsIsDel());
        feedbackInfo.setBsModifiedTime(new Date());
        feedbackInfo.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
        //客诉关闭，则关闭所有待办
        if(feedbackInfo.getBsStatus() == BasicStateEnum.FEEDBACK_FINISH.intValue()){
            todoInfoDao.closeByBsAndBsReferId(feedbackInfo.getId());
        }
        feedbackInfoDao.save(feedbackInfo);
        return ApiResponseResult.success("修改成功！").data(feedbackInfo);
    }

    @Transactional
    public ApiResponseResult delete(Long id) throws BusinessException {
        FeedbackInfo o = feedbackInfoDao.findOne(id);
        if (null == o) {
            return ApiResponseResult.failure("记录ID不存在或已被删除").status("error1");
        }
        if (o.getId() <= 0) {
            return ApiResponseResult.failure("没有操作权限");
        }
        o.setBsIsDel(BooleanStateEnum.TRUE.intValue());
        feedbackInfoDao.save(o);
        return ApiResponseResult.success("删除成功！");
    }

    @Transactional(readOnly = true)
    public ApiResponseResult getlist(String keyWord, Long id, Integer bsStatus, PageRequest pageRequest) {
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BooleanStateEnum.FALSE.intValue()));
        if(null != id){
            filters.add(new SearchFilter("id", SearchFilter.Operator.EQ, id));
        }
        if(null != bsStatus){
            filters.add(new SearchFilter("bsStatus", SearchFilter.Operator.EQ, bsStatus));
        }

        List<SearchFilter> filters1 = new ArrayList<SearchFilter>();
        if (StringUtils.isNotEmpty(keyWord)) {
            if(StringUtils.isNumeric(keyWord)){
                Long feedbackId = Long.parseLong(keyWord);
                filters1.add(new SearchFilter("id", SearchFilter.Operator.EQ, keyWord));
            }else{
            }

            List prList = productInfoDao.findByPrNameLike(keyWord);
            for(int i=0;i<prList.size();i++){
                filters1.add(new SearchFilter("bsPrId", SearchFilter.Operator.EQ, prList.get(i).toString()));
            }

            List suppList = supplierInfoDao.findByBsSuppChieseNameLike(keyWord);
            for(int i=0;i<suppList.size();i++){
                filters1.add(new SearchFilter("bsSuppId", SearchFilter.Operator.EQ, suppList.get(i).toString()));
            }
        }
        Specifications<FeedbackInfo> spec = Specifications.where(super.and(filters, FeedbackInfo.class));
        Specifications<FeedbackInfo> spec1 = spec.and(super.or(filters1, FeedbackInfo.class));
        Page<FeedbackInfo> page = feedbackInfoDao.findAll(spec1, pageRequest);
        return ApiResponseResult.success().data(Datagrid.create(page.getContent(), (int) page.getTotalElements(), pageRequest.getPageNumber() + 1, pageRequest.getPageSize()));
    }
}
