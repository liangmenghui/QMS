package com.unind.qms.web.supplier.service.internal;

import com.unind.base.data.ApiResponseResult;
import com.unind.base.dbconnection.query.Datagrid;
import com.unind.base.domain.admin.enumeration.BooleanStateEnum;
import com.unind.base.provider.BaseOprService;
import com.unind.base.provider.BusinessException;
import com.unind.qms.web.approved.dao.ApprovedItemsMapDao;
import com.unind.qms.web.approved.dao.ApprovedItemsRecordDao;
import com.unind.qms.web.approved.dao.ApprovedTermsDao;
import com.unind.qms.web.approved.entity.ApprovedItems;
import com.unind.qms.web.approved.entity.ApprovedItemsMap;
import com.unind.qms.web.approved.entity.ApprovedItemsRecord;
import com.unind.qms.web.approved.entity.ApprovedTerms;
import com.unind.qms.web.supplier.dao.PromoteDao;
import com.unind.qms.web.supplier.entity.Promote;
import com.unind.qms.web.supplier.service.PromoteService;
import io.swagger.annotations.Api;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springside.modules.persistence.SearchFilter;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * 不符合改进项
 * @author Shen
 */
@Service
@Transactional(rollbackFor = BusinessException.class)
public class PromoteImpl extends BaseOprService implements PromoteService {
    @Autowired
    private PromoteDao promoteDao;
    @Autowired
    private ApprovedItemsRecordDao approvedItemRecordDao;
    @Autowired
    private ApprovedItemsMapDao approvedItemsMapDao;
    @Autowired
    private ApprovedTermsDao approvedTermsDao;

    @Override
    @Transactional
    public ApiResponseResult add(Promote promote) throws BusinessException {
        if(promote.getBsItemsRecordId() == null){
            return ApiResponseResult.failure("审核项目记录ID为必填项！");
        }
        promote.setBsCreatedTime(new Date());
        promoteDao.save(promote);
        return ApiResponseResult.success("新增成功！").data(promote);
    }

    @Override
    @Transactional
    public ApiResponseResult edit(Promote promote) throws BusinessException {
        if(promote == null || promote.getId() == null){
            return ApiResponseResult.failure("记录ID为必填项！");
        }
        if(promote.getBsItemsRecordId() == null){
            return ApiResponseResult.failure("审核项目记录ID为必填项！");
        }
        Promote o = promoteDao.findOne(promote.getId());
        if(o == null){
            return ApiResponseResult.failure("记录ID不存在或已被删除！");
        }

        o.setBsResponsibleId(promote.getBsResponsibleId());
        o.setBsContent(promote.getBsContent());
        o.setBsAction(promote.getBsAction());
        o.setBsDeadline(promote.getBsDeadline());
        o.setBsModifiedTime(new Date());
        promoteDao.save(o);
        return ApiResponseResult.success("修改成功！").data(o);
    }

    @Override
    @Transactional
    public ApiResponseResult delete(Long id) throws BusinessException {
        Promote promote = promoteDao.findOne(id);
        if(promote == null){
            return ApiResponseResult.failure("记录ID不存在或已被删除！");
        }
        if(promote.getId() <= 0){
            return ApiResponseResult.failure("没有操作权限！");
        }
//        promote.setBsIsDel(BooleanStateEnum.TRUE.intValue());
        promoteDao.delete(promote);
        return ApiResponseResult.success("删除成功！");
    }

    /**
     * 获取不符合改进项
     * @param id
     * @param bsItemsRecordId
     * @param pageRequest
     * @return
     * @throws BusinessException
     */
    @Override
    @Transactional
    public ApiResponseResult getlist(Long id, Long bsItemsRecordId, PageRequest pageRequest) throws BusinessException {
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BooleanStateEnum.FALSE.intValue()));
        if(id != null){
            filters.add(new SearchFilter("id", SearchFilter.Operator.EQ, id));
        }
        if(bsItemsRecordId != null){
            filters.add(new SearchFilter("bsItemsRecordId", SearchFilter.Operator.EQ, bsItemsRecordId));
        }
        Specification<Promote> spec = Specifications.where(super.and(filters, Promote.class));
        Page<Promote> page = promoteDao.findAll(spec, pageRequest);
        return ApiResponseResult.success().data(Datagrid.create(page.getContent(), (int) page.getTotalElements(), pageRequest.getPageNumber() + 1, pageRequest.getPageSize()));
    }

    /**
     * 更新所有不符合改进项的内容
     * @return
     * @throws BusinessException
     */
    @Override
    @Transactional
    public ApiResponseResult updateContent() throws BusinessException{
        //1.遍历所有不符合改进项
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BooleanStateEnum.FALSE.intValue()));
        Specification<Promote> spec = Specifications.where(super.and(filters, Promote.class));
        List<Promote> promoteList = promoteDao.findAll(spec);
        if(promoteList.size() > 0){
            for(int i = 0; i < promoteList.size(); i++){
                Long itemsRecordId = promoteList.get(i).getBsItemsRecordId();  //审核项目记录ID

                //2.在审核项目记录表找出关联的审核项目记录，判断得分是否少于3
                List<SearchFilter> filters2 = new ArrayList<SearchFilter>();
                filters2.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BooleanStateEnum.FALSE.intValue()));
                filters2.add(new SearchFilter("id", SearchFilter.Operator.EQ, itemsRecordId));
                Specification<ApprovedItemsRecord> spec2 = Specifications.where(super.and(filters2, ApprovedItemsRecord.class));
                Sort sort = new Sort(Sort.Direction.DESC, "bsCreatedTime");
                List<ApprovedItemsRecord> approvedItemsRecordList = approvedItemRecordDao.findAll(spec2, sort);
                if(approvedItemsRecordList.size() > 0){
                    //这个得分是String类型
                    //例如2/10，2是当前审核得分，10是审核总分，所以这里应该取2
                    String scoreStr = approvedItemsRecordList.get(0).getBsScoreNum();
                    String scoreStrFirst = "";
                    if(StringUtils.isNotEmpty(scoreStr)){
                        if(scoreStr.matches("\\d+\\/+\\d+$")){
                            String[] scoreArray = scoreStr.split("/");
                            scoreStrFirst = scoreArray[0];
                        }else{
                            continue;
                        }
                    }else{
                        continue;
                    }
                    if(StringUtils.isNumeric(scoreStrFirst)){
                        if(Integer.parseInt(scoreStrFirst) < 3){
                            Long itemsId = approvedItemsRecordList.get(0).getBsItemsId();

                            //3.找出得分少于3的审核项目记录，并在审核条款关联表找出关联的条款
                            List<SearchFilter> filters3 = new ArrayList<SearchFilter>();
                            filters3.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BooleanStateEnum.FALSE.intValue()));
                            filters3.add(new SearchFilter("bsItemsId", SearchFilter.Operator.EQ, itemsId));
                            Specification<ApprovedItemsMap> spec3 = Specifications.where(super.and(filters3, ApprovedItemsMap.class));
                            List<ApprovedItemsMap> approvedItemsMapList = approvedItemsMapDao.findAll(spec3, sort);
                            if(approvedItemsMapList.size() > 0){
                                Long termsId = approvedItemsMapList.get(0).getBsTermsId();

                                //4.在审核条款表找出对应条款内容
                                ApprovedTerms approvedTerms = approvedTermsDao.findOne(termsId);
                                if(approvedTerms != null){
                                    String approvedContent = (approvedTerms.getBsContent() != null) ? (approvedTerms.getBsContent()) : (approvedTerms.getBsContentEn());
                                    promoteList.get(i).setBsContent(approvedContent);
                                }
                            }
                        }
                    }
                }
            }
        }
        //更新
        promoteDao.save(promoteList);
        return ApiResponseResult.success("更新成功！");
    }
}
