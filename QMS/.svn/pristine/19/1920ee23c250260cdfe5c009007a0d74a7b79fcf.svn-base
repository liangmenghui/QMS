package com.unind.qms.web.samplePlan.service.internal;

import com.unind.base.data.ApiResponseResult;
import com.unind.base.dbconnection.query.Datagrid;
import com.unind.base.domain.admin.enumeration.BaseEnumConstants;
import com.unind.base.domain.admin.enumeration.BooleanStateEnum;
import com.unind.base.provider.BaseOprService;
import com.unind.base.provider.BusinessException;
import com.unind.qms.web.samplePlan.dao.SampleVerificationLevelDao;
import com.unind.qms.web.samplePlan.entity.SampleVerificationLevel;
import com.unind.qms.web.samplePlan.service.SampleVerificationLevelService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springside.modules.persistence.SearchFilter;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * 检验水平
 */
@Service
@Transactional(rollbackFor = BusinessException.class)
public class SampleVerificationLevelImpl extends BaseOprService implements SampleVerificationLevelService {
    @Autowired
    private SampleVerificationLevelDao sampleVerificationLevelDao;

    @Override
    @Transactional
    public ApiResponseResult add(SampleVerificationLevel sampleVerificationLevel) throws BusinessException {
        if(sampleVerificationLevel == null || sampleVerificationLevel.getBsLevelName() == null){
            return ApiResponseResult.failure("检验水平名称为必填项！");
        }
        sampleVerificationLevel.setBsCreatedTime(new Date());
        sampleVerificationLevelDao.save(sampleVerificationLevel);
        return ApiResponseResult.success("新增成功！").data(sampleVerificationLevel);
    }

    @Override
    @Transactional
    public ApiResponseResult edit(SampleVerificationLevel sampleVerificationLevel) throws BusinessException {
        if(sampleVerificationLevel == null || sampleVerificationLevel.getId() == null){
            return ApiResponseResult.failure("记录ID为必填项！");
        }
        if(sampleVerificationLevel.getBsLevelName() == null){
            return ApiResponseResult.failure("检验水平名称为必填项！");
        }
        SampleVerificationLevel o = sampleVerificationLevelDao.findOne(sampleVerificationLevel.getId());
        if(o == null){
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }

        o.setBsLevelName(sampleVerificationLevel.getBsLevelName());
        o.setBsModifiedTime(new Date());
        sampleVerificationLevelDao.save(o);
        return ApiResponseResult.success("修改成功！").data(o);
    }

    @Override
    @Transactional
    public ApiResponseResult delete(Long id) throws BusinessException {
        SampleVerificationLevel o = sampleVerificationLevelDao.findOne(id);
        if(o == null){
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
        o.setBsIsDel(BooleanStateEnum.TRUE.intValue());
        sampleVerificationLevelDao.save(o);
        return ApiResponseResult.success("删除成功！");
    }

    @Override
    @Transactional
    public ApiResponseResult getlist(String bsLevelName, PageRequest pageRequest) throws BusinessException {
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BaseEnumConstants.FALSE));
        if (bsLevelName != null) {
            filters.add(new SearchFilter("bsLevelName", SearchFilter.Operator.EQ, bsLevelName));
        }
        Specification<SampleVerificationLevel> spec = Specifications.where(super.and(filters, SampleVerificationLevel.class));
        Page<SampleVerificationLevel> page = sampleVerificationLevelDao.findAll(spec, pageRequest);
        return ApiResponseResult.success().data(Datagrid.create(page.getContent(), (int) page.getTotalElements(), pageRequest.getPageNumber() + 1, pageRequest.getPageSize()));
    }
}
