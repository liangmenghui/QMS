package com.unind.qms.web.risk.service.internal;

import com.unind.base.data.ApiResponseResult;
import com.unind.base.dbconnection.query.Datagrid;
import com.unind.base.domain.admin.BaseEntity;
import com.unind.base.domain.admin.enumeration.BaseEnumConstants;
import com.unind.base.domain.admin.enumeration.BooleanStateEnum;
import com.unind.base.provider.BaseOprService;
import com.unind.base.provider.BusinessException;
import com.unind.base.provider.context.SessionContextUtils;
import com.unind.qms.web.basic.dao.FeedbackInfoDao;
import com.unind.qms.web.basic.entity.FeedbackInfo;
import com.unind.qms.web.product.dao.ProductInfoDao;
import com.unind.qms.web.product.entity.ProductInfo;
import com.unind.qms.web.risk.dao.ProductRiskDao;
import com.unind.qms.web.risk.dao.SupplierRiskDao;
import com.unind.qms.web.risk.entity.ProductRisk;
import com.unind.qms.web.risk.entity.SupplierRisk;
import com.unind.qms.web.risk.service.SupplierRiskService;
import com.unind.qms.web.shipment.entity.ShipmentInspect;
import com.unind.qms.web.supplier.dao.SupplierInfoDao;
import com.unind.qms.web.supplier.entity.SupplierInfo;
import io.swagger.annotations.Api;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springside.modules.persistence.SearchFilter;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * 供应商风险管理信息
 * @author Shen
 */
@Service
@Transactional(rollbackFor = BusinessException.class)
public class SupplierRiskImpl extends BaseOprService implements SupplierRiskService {

    @Autowired
    private SupplierRiskDao supplierRiskDao;
    @Autowired
    private SupplierInfoDao supplierInfoDao;
    @Autowired
    private ProductInfoDao productInfoDao;
    @Autowired
    private ProductRiskDao productRiskDao;
    @Autowired
    private FeedbackInfoDao feedbackInfoDao;

    /**
     * 添加供应商风险管理信息
     * @param supplierRisk
     * @return
     * @throws BusinessException
     */
    @Override
    @Transactional
    public ApiResponseResult add(SupplierRisk supplierRisk) throws BusinessException {
        if(null == supplierRisk || null == supplierRisk.getBsSuppId()){
            return ApiResponseResult.failure("供应商ID为必填项");
        }
        int count = supplierRiskDao.countByBsSuppId(supplierRisk.getBsSuppId());
        if(count > 0){
            return ApiResponseResult.failure("供应商已存在");
        }
        //1.添加创建时间
        supplierRisk.setBsCreatedTime(new Date());

        //2.添加type值
        //所有得分类型默认为1
        supplierRisk.setBsFeedbackType((supplierRisk.getBsFeedbackType() == 0) ? 1 : supplierRisk.getBsFeedbackType());
        supplierRisk.setBsPpmType((supplierRisk.getBsPpmType() == 0) ? 1 : supplierRisk.getBsPpmType());
        supplierRisk.setBsDeliveryType((supplierRisk.getBsDeliveryType() == 0) ? 1 : supplierRisk.getBsDeliveryType());
        supplierRisk.setBsInspectType((supplierRisk.getBsInspectType() == 0) ? 1 : supplierRisk.getBsInspectType());
        supplierRisk.setBsPaymentType((supplierRisk.getBsPaymentType() == 0) ? 1 : supplierRisk.getBsPaymentType());
        supplierRisk.setBsCpkType((supplierRisk.getBsCpkType() == 0) ? 1 : supplierRisk.getBsCpkType());
        supplierRisk.setBsDangerProType((supplierRisk.getBsDangerProType() == 0) ? 1 : supplierRisk.getBsDangerProType());
        supplierRisk.setBsApproveType((supplierRisk.getBsApproveType() == 0) ? 1 : supplierRisk.getBsApproveType());
        supplierRisk.setBsEhsType((supplierRisk.getBsEhsType() == 0) ? 1 : supplierRisk.getBsEhsType());

        //3.添加value值，并修改对应type值
        supplierRisk = updateValueType(supplierRisk);

        //4.计算各项得分和总得分
        supplierRisk.setBsFeedbackScore(supplierRisk.getBsFeedbackType() * 3);
        supplierRisk.setBsPpmScore(supplierRisk.getBsPpmType() * 2);
        supplierRisk.setBsDeliveryScore(supplierRisk.getBsDeliveryType() * 3);
        supplierRisk.setBsInspectScore(supplierRisk.getBsInspectType() * 2);
        supplierRisk.setBsPaymentScore(supplierRisk.getBsPaymentType() * 1);
        supplierRisk.setBsCpkScore(supplierRisk.getBsCpkType() * 2);
        supplierRisk.setBsDangerProScore(supplierRisk.getBsDangerProType() * 2);
        supplierRisk.setBsApprovedScore(supplierRisk.getBsApproveType() * 2);
        supplierRisk.setBsEhsScore(supplierRisk.getBsEhsType() * 2);
        supplierRisk.setBsBusinessScore(((supplierRisk.isBsComStability() ? 1 : 0) + (supplierRisk.isBsAntiCorruptProtocol() ? 1 : 0 )
                + (supplierRisk.isBsLongTermProtocol() ? 1 : 0 ) + (supplierRisk.isBsCooperProtocol() ? 1 : 0 )
                + (supplierRisk.isBsBusinessBroScore() ? 1 : 0)) * 2);
        supplierRisk.setBsRiskScore(supplierRisk.getBsFeedbackScore() + supplierRisk.getBsPpmScore() + supplierRisk.getBsDeliveryScore() + supplierRisk.getBsInspectScore()
                + supplierRisk.getBsPaymentScore() + supplierRisk.getBsCpkScore() + supplierRisk.getBsDangerProScore() + supplierRisk.getBsApprovedScore()
                + supplierRisk.getBsEhsScore() + supplierRisk.getBsBusinessScore());

        //5.统计风险等级（1-5级）
        //判断直升高风险类型是否达到高风险（type为5），满足要求直升高风险
        int level = 1;
        if(supplierRisk.getBsFeedbackType() == 5 || supplierRisk.getBsDeliveryType() == 5){
            //直升高风险
            level = 5;
        }else{
            int totalScore = supplierRisk.getBsRiskScore();
            if(totalScore >= 0 && totalScore <= 40){
            }
            if(totalScore >= 41 && totalScore <= 55){
                level = 2;
            }
            if(totalScore >= 56 && totalScore <= 70){
                level = 3;
            }
            if(totalScore >= 71 && totalScore <= 85){
                level = 4;
            }
            if(totalScore >= 86 && totalScore <= 100){
                level = 5;
            }
        }
        supplierRisk.setBsRiskLevel(level);
        supplierRiskDao.save(supplierRisk);

        //6.更新到供应商信息表的系统风险等级
        SupplierInfo supplierInfo = supplierInfoDao.findOne(supplierRisk.getBsSuppId());
        if(supplierInfo != null){
            supplierInfo.setBsRiskLevelSys(level);
            supplierInfo.setBsRiskTimeSys(new Date());
            supplierInfo.setBsModifiedTime(new Date());
            supplierInfo.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
            //如果供应商风险管理模式为自动，则修改风险等级；如果为手动，则不必修改
            if(supplierInfo.getBsRiskManual() == BooleanStateEnum.FALSE.intValue()){
                supplierInfo.setBsRiskScore(supplierRisk.getBsRiskScore());
                supplierInfo.setBsRiskLevel(level);
            }
        }

        return ApiResponseResult.success("新增成功！").data(supplierRisk);
    }

    /**
     * 修改供应商风险管理信息
     * @param supplierRisk
     * @return
     * @throws BusinessException
     */
    @Override
    @Transactional
    public ApiResponseResult edit(SupplierRisk supplierRisk) throws BusinessException {
        if(null == supplierRisk || null == supplierRisk.getId()){
            return ApiResponseResult.failure("记录ID为必填项");
        }
        if(null == supplierRisk.getBsSuppId()){
            return ApiResponseResult.failure("供应商ID为必填项");
        }
        SupplierRisk o = supplierRiskDao.findOne(supplierRisk.getId());
        if(null == o){
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
        //1.修改时间
        o.setBsModifiedTime(new Date());
        o.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
        o.setBsFeedbackType(supplierRisk.getBsFeedbackType());
        o.setBsPpmType(supplierRisk.getBsPpmType());
        o.setBsDeliveryType(supplierRisk.getBsDeliveryType());
        o.setBsInspectType(supplierRisk.getBsInspectType());
        o.setBsPaymentType(supplierRisk.getBsPaymentType());
        o.setBsCpkType(supplierRisk.getBsCpkType());
        o.setBsDangerProType(supplierRisk.getBsDangerProType());
        o.setBsApproveType(supplierRisk.getBsApproveType());
        o.setBsEhsType(supplierRisk.getBsEhsType());
        o.setBsComStability(supplierRisk.isBsComStability());
        o.setBsAntiCorruptProtocol(supplierRisk.isBsAntiCorruptProtocol());
        o.setBsLongTermProtocol(supplierRisk.isBsLongTermProtocol());
        o.setBsCooperProtocol(supplierRisk.isBsCooperProtocol());
        o.setBsBusinessBroScore(supplierRisk.isBsBusinessBroScore());
        //修改value值
        o.setBsEhsValue(supplierRisk.getBsEhsValue());
        o.setBsPpmValue(supplierRisk.getBsPpmValue());
        o.setBsCpkValue(supplierRisk.getBsCpkValue());
        o.setBsInspectValue(supplierRisk.getBsInspectValue());

        //2.添加value值，并修改对应type值
        o = updateValueType(o);

        //3.计算各项得分和总得分
        o.setBsFeedbackScore(o.getBsFeedbackType() * 3);
        o.setBsPpmScore(o.getBsPpmType() * 2);
        o.setBsDeliveryScore(o.getBsDeliveryType() * 3);
        o.setBsInspectScore(o.getBsInspectType() * 2);
        o.setBsPaymentScore(o.getBsPaymentType() * 1);
        o.setBsCpkScore(o.getBsCpkType() * 2);
        o.setBsDangerProScore(o.getBsDangerProType() * 2);
        o.setBsApprovedScore(o.getBsApproveType() * 2);
        o.setBsEhsScore(o.getBsEhsType() * 2);
        o.setBsBusinessScore(((o.isBsComStability() ? 1 : 0) + (o.isBsAntiCorruptProtocol() ? 1 : 0 )
                + (o.isBsLongTermProtocol() ? 1 : 0 ) + (o.isBsCooperProtocol() ? 1 : 0 )
                + (o.isBsBusinessBroScore() ? 1 : 0)) * 2);
        o.setBsRiskScore(o.getBsFeedbackScore() + o.getBsPpmScore() + o.getBsDeliveryScore() + o.getBsInspectScore()
                + o.getBsPaymentScore() + o.getBsCpkScore() + o.getBsDangerProScore() + o.getBsApprovedScore()
                + o.getBsEhsScore() + o.getBsBusinessScore());

        //4.统计风险等级（1-5级）
        //判断直升高风险类型是否达到高风险（type为5），满足要求直升高风险
        int level = 1;
        if(o.getBsFeedbackType() == 5 || o.getBsDeliveryType() == 5){
            //直升高风险
            level = 5;
        }else{
            int totalScore = o.getBsRiskScore();
            if(totalScore >= 0 && totalScore <= 40){
            }
            if(totalScore >= 41 && totalScore <= 55){
                level = 2;
            }
            if(totalScore >= 56 && totalScore <= 70){
                level = 3;
            }
            if(totalScore >= 71 && totalScore <= 85){
                level = 4;
            }
            if(totalScore >= 86 && totalScore <= 100){
                level = 5;
            }
        }
        o.setBsRiskLevel(level);
        supplierRiskDao.save(o);

        //5.更新到供应商信息表的系统风险等级
        SupplierInfo supplierInfo = supplierInfoDao.findOne(o.getBsSuppId());
        if(supplierInfo != null){
            supplierInfo.setBsRiskLevelSys(level);
            supplierInfo.setBsRiskTimeSys(new Date());
            supplierInfo.setBsModifiedTime(new Date());
            supplierInfo.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
            //如果供应商风险管理模式为自动，则修改风险等级；如果为手动，则不必修改
            if(supplierInfo.getBsRiskManual() == BooleanStateEnum.FALSE.intValue()){
                supplierInfo.setBsRiskScore(o.getBsRiskScore());
                supplierInfo.setBsRiskLevel(level);
            }
            supplierInfoDao.save(supplierInfo);
        }

        return ApiResponseResult.success("修改成功！").data(o);
    }

    /**
     * 删除供应商风险管理信息
     * @param id
     * @return
     * @throws BusinessException
     */
    @Override
    @Transactional
    public ApiResponseResult delete(Long id) throws BusinessException {
        SupplierRisk o = supplierRiskDao.findOne(id);
        if(null == o){
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
        if (o.getId() <= 0) {
            return ApiResponseResult.failure("没有操作权限");
        }
        o.setBsIsDel(BooleanStateEnum.TRUE.intValue());
        supplierRiskDao.save(o);
        return ApiResponseResult.success("删除成功！");
    }

    /**
     * 获取供应商风险管理信息
     * @param bsSuppId
     * @param pageRequest
     * @return
     * @throws BusinessException
     */
    @Override
    @Transactional(readOnly = true)
    public ApiResponseResult getlist(Long bsSuppId, PageRequest pageRequest) throws BusinessException {
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BaseEnumConstants.FALSE));
        if(bsSuppId != null){
            filters.add(new SearchFilter("bsSuppId", SearchFilter.Operator.EQ, bsSuppId));
        }
        Specifications<SupplierRisk> spec = Specifications.where(super.and(filters, SupplierRisk.class));
        Page<SupplierRisk> page = supplierRiskDao.findAll(spec, pageRequest);
        return ApiResponseResult.success().data(Datagrid.create(page.getContent(), (int) page.getTotalElements(), pageRequest.getPageNumber() + 1, pageRequest.getPageSize()));
    }

    /**
     * 更新产品风险信息表的value及type
     * @param supplierRisk
     * @return
     * @throws BusinessException
     */
    public SupplierRisk updateValueType(SupplierRisk supplierRisk) throws BusinessException{
        //供应商的ppm值取该供应商下的所有产品的不良品之和与检验数之和的比值，计算公式：(不良品/检验数) * 10^6
        //供应商cpk值取该供应商下的所有产品的最小cpk值
        //供应商验货不合格次数取该供应商下所有产品之和
        //供应商高风险产品占比，用户自己在页面选择
        //供应商最近一次客诉
        //供应商付款期
        //供应商EHS，用户自己在页面选择
        double ppmValue = 0;
        double ppmResult = 0;  //PPM不良品
        double ppmNum = 0;     //PPM检验数
        double cpkValue = 0;
        double inspectValue = 0;
        boolean isTriple = false; //是否连续三次验货不合格
        Sort sort = new Sort(Sort.Direction.DESC, "bsCreatedTime");
        //1.通过suppId从供应商信息表找到suppCode
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BooleanStateEnum.FALSE.intValue()));
        filters.add(new SearchFilter("id", SearchFilter.Operator.EQ, supplierRisk.getBsSuppId()));
        Specification<SupplierInfo> spec = Specifications.where(super.and(filters, SupplierInfo.class));
        SupplierInfo supplierInfo = supplierInfoDao.findOne(spec);
        if(supplierInfo != null){
            //2.通过suppCode从产品信息表找到供应商对应的多个产品prId
            List<ProductInfo> productInfoList = productInfoDao.findByBsIsDelAndBsSuppCode(BooleanStateEnum.FALSE.intValue(), supplierInfo.getBsSuppCode());
            if(productInfoList.size() > 0){
                //定义cpkValue的List集合，获取所有cpkValue，以便后面比较的到最小值使用
                List<Double> cpkValueList = new ArrayList<Double>();

                for(ProductInfo productInfo : productInfoList) {
                    //3.通过产品prId从产品风险信息表找到ppm值，并计算所有ppm值之和
                    //比较cpk值，得到最小值
                    //计算所有不合格次数之和
                    List<ProductRisk> productRiskList = productRiskDao.findByBsIsDelAndBsPrIdOrderByBsCreatedTimeDesc(BooleanStateEnum.FALSE.intValue(), productInfo.getId());
                    if (productInfoList.size() > 0) {
                        //3.1供应商ppm值,获取所有产品的不良数之和及检验数之和
                        ppmResult = ppmResult + productRiskList.get(0).getBsPpmResult();
                        ppmNum = ppmNum + productRiskList.get(0).getBsPpmNum();
                        //3.2获取所有产品的cpk值
                        cpkValueList.add(productRiskList.get(0).getBsCpkValue());
                        //3.3验货不合格次数
                        inspectValue = inspectValue + productRiskList.get(0).getBsInspectValue();
                        if (productRiskList.get(0).getBsInspectType() == 5) {
                            isTriple = true;
                        }
                    }
                }
                //4修改value和type
                //4.1修改ppm的value和type
                //计算公式：(不良品/检验数) * 10^6
                if(ppmNum != 0){
                    ppmValue = (ppmResult / ppmNum) * 1000000;
                }
                supplierRisk.setBsPpmValue(ppmValue);
                if (ppmValue <= 50) {
                    supplierRisk.setBsPpmType(1);
                }
                if (ppmValue > 50 && ppmValue <= 200) {
                    supplierRisk.setBsPpmType(2);
                }
                if (ppmValue > 200 && ppmValue <= 500) {
                    supplierRisk.setBsPpmType(3);
                }
                if (ppmValue > 500 && ppmValue <= 1000) {
                    supplierRisk.setBsPpmType(4);
                }
                if (ppmValue > 1000) {
                    supplierRisk.setBsPpmType(5);
                }
                //4.2修改cpk的value和type
                //根据得到的cpkValueList集合，比较得到最小值
                cpkValue = cpkValueList.get(0);
                for(int i = 0; i < cpkValueList.size(); i++){
                    if(cpkValueList.get(i) < cpkValue){
                        cpkValue = cpkValueList.get(i);
                    }
                }
                supplierRisk.setBsCpkValue(cpkValue);
                if (cpkValue < 0.8) {
                    supplierRisk.setBsCpkType(5);
                }
                if (cpkValue >= 0.8 && cpkValue < 1) {
                    supplierRisk.setBsCpkType(4);
                }
                if (cpkValue >= 1 && cpkValue < 1.33) {
                    supplierRisk.setBsCpkType(3);
                }
                if (cpkValue >= 1.33 && cpkValue < 1.67) {
                    supplierRisk.setBsCpkType(2);
                }
                if (cpkValue >= 1.67) {
                    supplierRisk.setBsCpkType(1);
                }
                //4.3修改不合格次数的value和type
                supplierRisk.setBsInspectValue(inspectValue);
                if (inspectValue == 0) {
                    supplierRisk.setBsInspectType(1);
                }
                if (inspectValue == 1) {
                    supplierRisk.setBsInspectType(2);
                }
                if (inspectValue >= 2) {
                    supplierRisk.setBsInspectType(3);
                }
                if (inspectValue >= 3) {
                    supplierRisk.setBsInspectType(4);
                }
                if (isTriple) {
                    //连续发生三次以上
                    supplierRisk.setBsInspectType(5);
                }
            }
        }

        //5.取最近一次客诉时间判断type
        List<SearchFilter> filters2 = new ArrayList<SearchFilter>();
        filters2.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BooleanStateEnum.FALSE.intValue()));
        filters2.add(new SearchFilter("bsSuppId", SearchFilter.Operator.EQ, supplierRisk.getBsSuppId()));
        Specification<FeedbackInfo> spec2 = Specifications.where(super.and(filters2, FeedbackInfo.class));
        List<FeedbackInfo> feedbackInfoList = feedbackInfoDao.findAll(spec2, sort);
        if(feedbackInfoList.size() <= 0){
            supplierRisk.setBsFeedbackType(1);
        }else if(feedbackInfoList.get(0).getBsStatus() == 0){
            supplierRisk.setBsFeedbackType(5);
        }else{
            int feedbackDays = getDays(feedbackInfoList.get(0).getBsCreatedTime(), new Date());
            if(feedbackDays > 180){
                supplierRisk.setBsFeedbackType(2);
            }
            if(feedbackDays > 90 && feedbackDays <= 180){
                supplierRisk.setBsFeedbackType(3);
            }
            if(feedbackDays <= 90){
                supplierRisk.setBsFeedbackType(4);
            }
        }

        //6.根据供应商付款期来判断type（付款期从供应商信息表的bsPayCondition获取）
        //包括类型：立即付款、5天、7天、10天、15天、30天、45天、60天、90天、120天
        if(supplierInfo != null){
            String paymentDays = supplierInfo.getBsPayCondition().trim();
            if(paymentDays.equals("120天")){
                supplierRisk.setBsPaymentType(2);
            }
            if(paymentDays.equals("90天") || paymentDays.equals("60天") || paymentDays.equals("45天")){
                supplierRisk.setBsPaymentType(3);
            }
            if(paymentDays.equals("30天")){
                supplierRisk.setBsPaymentType(4);
            }
            if(paymentDays.equals("15天") || paymentDays.equals("10天") || paymentDays.equals("7天") ||
                    paymentDays.equals("5天") || paymentDays.equals("立即付款")){
                supplierRisk.setBsPaymentType(5);
            }
        }

        //7.根据EHS的value值来判断type
        if(supplierRisk.getBsEhsValue() <= 2){
            supplierRisk.setBsEhsType(1);
        }
        if(supplierRisk.getBsEhsValue() > 2 && supplierRisk.getBsEhsValue() <= 3){
            supplierRisk.setBsEhsType(2);
        }
        if(supplierRisk.getBsEhsValue() > 3 && supplierRisk.getBsEhsValue() <= 4){
            supplierRisk.setBsEhsType(3);
        }
        if(supplierRisk.getBsEhsValue() > 4 && supplierRisk.getBsEhsValue() <= 5){
            supplierRisk.setBsEhsType(4);
        }
        if(supplierRisk.getBsEhsValue() >= 6){
            supplierRisk.setBsEhsType(5);
        }

        return supplierRisk;
    }

    /**
     * 计算相差天数
     * @param start
     * @param end
     * @return
     */
    public int getDays(Date start, Date end) {
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        try {
            return (int) ((df.parse(df.format(end)).getTime() - df.parse(df.format(start)).getTime()) / (24 * 60 * 60 * 1000));
        } catch (ParseException e) {
            e.printStackTrace();
            return 0;
        }
    }

}
