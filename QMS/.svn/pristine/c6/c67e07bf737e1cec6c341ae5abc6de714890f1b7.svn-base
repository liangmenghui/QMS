package com.unind.qms.web.supplier.service.internal;

import com.unind.base.dao.admin.SysUserDao;
import com.unind.base.data.ApiResponseResult;
import com.unind.base.dbconnection.query.Datagrid;
import com.unind.base.domain.admin.enumeration.BaseEnumConstants;
import com.unind.base.domain.admin.enumeration.BooleanStateEnum;
import com.unind.base.domain.admin.user.SysUser;
import com.unind.base.provider.BaseOprService;
import com.unind.base.provider.BusinessException;
import com.unind.base.provider.context.SessionContextUtils;
import com.unind.qms.enumeration.BasicEnumConstants;
import com.unind.qms.enumeration.BasicStateEnum;
import com.unind.qms.web.basic.dao.TodoInfoDao;
import com.unind.qms.web.basic.entity.TodoInfo;
import com.unind.qms.web.supplier.dao.SupplierInfoDao;
import com.unind.qms.web.supplier.entity.SupplierInfo;
import com.unind.qms.web.supplier.service.SupplierInfoService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springside.modules.persistence.SearchFilter;

import java.util.*;

@Service
@Transactional(rollbackFor = BusinessException.class)
public class SupplierInfoImpl extends BaseOprService implements SupplierInfoService {
    @Autowired
    private SupplierInfoDao supplierInfoDao;

    @Autowired
    private TodoInfoDao todoInfoDao;

    @Autowired
    private SysUserDao sysUserDao;

    @Transactional
    public ApiResponseResult add(SupplierInfo supplierInfo) throws BusinessException {
        if (StringUtils.isEmpty(supplierInfo.getBsSuppCode()) || StringUtils.isEmpty(supplierInfo.getBsSuppCode().trim())) {
            return ApiResponseResult.failure("供应商编号不能为空");
        }
        if (StringUtils.isEmpty(supplierInfo.getBsSuppChieseName()) || StringUtils.isEmpty(supplierInfo.getBsSuppChieseName().trim())) {
            return ApiResponseResult.failure("中文名不能为空");
        }
        int counts = supplierInfoDao.countByBsSuppCode(supplierInfo.getBsSuppCode());
        if (counts > 0) {
            return ApiResponseResult.failure("供应商已存在");
        }
//        supplierInfo.setBsNo(supplierInfo.getBsNo().trim());
//        supplierInfo.setBsType(supplierInfo.getBsType());
//        supplierInfo.setBsSubtype(supplierInfo.getBsSubtype());
//        supplierInfo.setBsContent(supplierInfo.getBsContent());
//        supplierInfo.setBsStandard(supplierInfo.getBsStandard());
//        supplierInfo.setBsRemark(supplierInfo.getBsRemark());

        supplierInfo.setBsRiskLevel(0);
        supplierInfo.setBsRiskManual(0);
        supplierInfo.setBsRiskScore(0);
        supplierInfo.setBsCreatedTime(new Date());
//		supplierInfo.setPkCreatedBy(SessionContextUtils.getCurrentUser().getId());
//        supplierInfo.setPkCreatedBy(Long.parseLong("1"));
        supplierInfoDao.save(supplierInfo);
        return ApiResponseResult.success("新增成功！");
    }

    @Transactional
    public ApiResponseResult edit(SupplierInfo supplierInfo) throws BusinessException {
        if (StringUtils.isEmpty(supplierInfo.getBsSuppCode()) || StringUtils.isEmpty(supplierInfo.getBsSuppCode().trim())) {
            return ApiResponseResult.failure("供应商编号不能为空");
        }
        if (StringUtils.isEmpty(supplierInfo.getBsSuppChieseName()) || StringUtils.isEmpty(supplierInfo.getBsSuppChieseName().trim())) {
            return ApiResponseResult.failure("中文名不能为空");
        }
        SupplierInfo o = new SupplierInfo();
        if (null == supplierInfo.getId()) {
            o = supplierInfoDao.findByBsSuppCode(supplierInfo.getBsSuppCode()).get(0);
        }else{
            o = supplierInfoDao.findOne(supplierInfo.getId());
        }
        if (null == o) {
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
//        o.setBsType(supplierInfo.getBsType());
//        o.setBsSubtype(supplierInfo.getBsSubtype());
//        o.setBsContent(supplierInfo.getBsContent());
//        o.setBsStandard(supplierInfo.getBsStandard());
//        o.setBsRemark(supplierInfo.getBsRemark());

		supplierInfo.setId(o.getId());
        supplierInfo.setBsRiskLevel(0);
        supplierInfo.setBsRiskManual(0);
        supplierInfo.setBsRiskScore(0);
        supplierInfo.setBsCreatedTime(o.getBsCreatedTime());
        supplierInfo.setBsVersion(o.getBsVersion());
        supplierInfo.setBsIsDel(o.getBsIsDel());
        supplierInfo.setBsModifiedTime(new Date());
        supplierInfo.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
//        supplierInfo.setPkModifiedBy(Long.parseLong("1"));
        supplierInfoDao.save(supplierInfo);
        return ApiResponseResult.success("修改成功！");
    }

    @Transactional
    public ApiResponseResult delete(Long id,String bsSuppCode) throws BusinessException {
        SupplierInfo o = new SupplierInfo();
        if (null == id) {
            o = supplierInfoDao.findByBsSuppCode(bsSuppCode).get(0);
        }else{
            o = supplierInfoDao.findOne(id);
        }
        if (null == o) {
            return ApiResponseResult.failure("记录ID不存在或已被删除").status("error1");
        }
        if (o.getId() <= 0) {
            return ApiResponseResult.failure("没有操作权限");
        }
        o.setBsIsDel(BooleanStateEnum.TRUE.intValue());
        supplierInfoDao.save(o);
        return ApiResponseResult.success("删除成功！");
    }

    @Transactional(readOnly = true)
    public ApiResponseResult getlist(String keyWord, Long id, Integer bsIsApprove, String bsSuppStatus, Integer bsRiskLevel, PageRequest pageRequest) {
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BaseEnumConstants.FALSE));
        if (null != id) {
            filters.add(new SearchFilter("id", SearchFilter.Operator.EQ, id));
        }
        if (null != bsIsApprove) {
            filters.add(new SearchFilter("bsIsApprove", SearchFilter.Operator.EQ, bsIsApprove));
        }
        if (StringUtils.isNotEmpty(bsSuppStatus)){
            filters.add(new SearchFilter("bsSuppStatus", SearchFilter.Operator.EQ, bsSuppStatus));
        }
        if (null != bsRiskLevel){
            filters.add(new SearchFilter("bsRiskLevel", SearchFilter.Operator.EQ, bsRiskLevel));
        }
        List<SearchFilter> filters1 = new ArrayList<SearchFilter>();
        if (StringUtils.isNotEmpty(keyWord)) {
            filters1.add(new SearchFilter("bsSuppCode", SearchFilter.Operator.LIKE, keyWord));
            filters1.add(new SearchFilter("bsSuppChieseName", SearchFilter.Operator.LIKE, keyWord));
        }
        Specifications<SupplierInfo> spec = Specifications.where(super.and(filters, SupplierInfo.class));
        Specifications<SupplierInfo> spec1 = spec.and(super.or(filters1, SupplierInfo.class));
        Page<SupplierInfo> page = supplierInfoDao.findAll(spec1, pageRequest);
        return ApiResponseResult.success().data(Datagrid.create(page.getContent(), (int) page.getTotalElements(), pageRequest.getPageNumber() + 1, pageRequest.getPageSize()));
    }

    /**
     * 申请变更风险等级（添加待办事项）
     * @param id
     * @param bsRiskLevelUser
     * @param bsRiskDescUser
     * @return
     */
    @Transactional
    public ApiResponseResult applyRiskLevel(Long id, Integer bsRiskLevelUser, String bsRiskDescUser) throws BusinessException {
        //修改供应商信息表的风险等级
        SupplierInfo o = supplierInfoDao.findOne(id);
        if(null == o){
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
        if (o.getId() <= 0) {
            return ApiResponseResult.failure("没有操作权限");
        }
        o.setBsRiskLevelUser(bsRiskLevelUser);
        o.setBsRiskTimeUser(new Date());
        o.setBsRiskDescUser(bsRiskDescUser);
        o.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
        supplierInfoDao.save(o);

        //添加代办事项
        TodoInfo todoInfo = new TodoInfo();
        todoInfo.setBsUserId(SessionContextUtils.getCurrentUser().getId());
        todoInfo.setBsReferId(id);
        todoInfo.setBsRouter("/qms/supplier/riskManagement");
        //设置代办事项标题
        SysUser user = sysUserDao.findOne(SessionContextUtils.getCurrentUser().getId());
        String userName = user.getBsName();
        String title = "[风险等级变更申请]" + userName + "申请将" + o.getBsSuppChieseName() + "风险等级变更为" + bsRiskLevelUser + "级";
        todoInfo.setBsTitle(title);
        todoInfo.setBsStatus(BasicEnumConstants.TODO_NOFINISH);
        todoInfo.setBsContent(bsRiskDescUser);
        todoInfo.setBsSystemType(BasicStateEnum.TODO_QMSTYPE.intValue());
        todoInfo.setBsType(BasicEnumConstants.TODO_SUPP_RISK);
        todoInfo.setBsCreatedTime(new Date());
        todoInfo.setPkCreatedBy(SessionContextUtils.getCurrentUser().getId());
        todoInfoDao.save(todoInfo);
        return ApiResponseResult.success("手动调整风险等级申请成功！").data(todoInfo);
    }

    /**
     * 完成变更风险等级（关闭待办事项）
     * @param id
     * @param bsRiskLevelUser
     * @return
     */
    @Transactional
    public ApiResponseResult completeRiskLevel(Long id, Integer bsRiskLevelUser) throws BusinessException {
        SupplierInfo supplierInfo = supplierInfoDao.findOne(id);
        if(null == supplierInfo){
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
        if(supplierInfo.getId() <= 0){
            return ApiResponseResult.failure("没有操作权限");
        }
        //关闭代办事项
        todoInfoDao.closeByBsReferId(id);

        //修改供应商信息表的风险等级
        supplierInfo.setBsRiskLevel(bsRiskLevelUser);
        supplierInfo.setBsRiskManual(BooleanStateEnum.TRUE.intValue());
        supplierInfoDao.save(supplierInfo);
        return ApiResponseResult.success("手动调整风险等级成功！").data(supplierInfo);
    }

    /**
     * 自动调整风险等级
     * @param id
     * @return
     */
    @Transactional
    public ApiResponseResult autoRiskLevel(Long id) throws BusinessException {
        SupplierInfo supplierInfo = supplierInfoDao.findOne(id);
        if(null == supplierInfo){
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
        if(supplierInfo.getId() <= 0){
            return ApiResponseResult.failure("没有操作权限");
        }
        //切换成自动风险管理
        supplierInfo.setBsRiskLevel(supplierInfo.getBsRiskLevelSys());
        supplierInfo.setBsRiskManual(BooleanStateEnum.FALSE.intValue());
        supplierInfo.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
        supplierInfoDao.save(supplierInfo);
        return ApiResponseResult.success("自动调整风险等级成功！").data(supplierInfo);
    }

    @Transactional(readOnly = true)
    public ApiResponseResult getSrmApprovedSupp(String schInfo, String approvedLevel, Pageable pageRequest) throws BusinessException {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("schInfo", schInfo);
        StringBuffer sqlbf1 = new StringBuffer();
        sqlbf1.append(" SELECT a.*,to_char(b.bs_created_time,'yyyy-MM-dd') checktime,case b.bs_priority when 1 then '待初评' when 2 then '辅导中' when 3 then '待初评' end status,");
        sqlbf1.append(" case b.bs_priority when 1 then '暂无' when 3 then '是' end iscoach,");
        sqlbf1.append(" case a.bs_supp_grade when '1' then '注册' when '2' then '潜在' when '3' then '暂准' when '6' then '特批' end grade FROM t_supplier_info a");
        sqlbf1.append(" LEFT JOIN t_approved_items_record b ON b.bs_supp_id = a.id LEFT JOIN t_approved_items c ON c.id = b.bs_items_id");
        sqlbf1.append(" WHERE c.bs_type = '22' and b.bs_status = '1'");
        if(approvedLevel.equals("review")){
            sqlbf1.append(" and b.bs_priority in (1,3)");
        }else if(approvedLevel.equals("coach")){
            sqlbf1.append(" and b.bs_priority = 2");
        }else{}
        sqlbf1.append(" and concat(concat(concat(concat(a.bs_login_name,a.bs_supp_chiese_name),a.bs_supp_contact_name),a.bs_supp_mobile),a.bs_supp_address) like '%'||:schInfo||'%'");
        List<Map<String, Object>> list = super.findBySql(sqlbf1.toString(), pageRequest, param);
        List<Map<String, Object>> listAll = super.findBySql(sqlbf1.toString(), param);
        return ApiResponseResult.success().data(list).count(listAll.size());
    }

    @Transactional(readOnly = true)
    public ApiResponseResult getSrmApprovedFile(Long suppId, String approvedLevel) throws BusinessException {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("suppId", suppId);
        StringBuffer sqlbf1 = new StringBuffer();
        sqlbf1.append(" SELECT a.*,to_char(a.bs_created_time,'yyyy-MM-dd') uploadtime FROM fs_file a");
        sqlbf1.append(" LEFT JOIN t_approved_items_record_file b on b.fs_file_id = a.id");
        sqlbf1.append(" LEFT JOIN t_approved_items_record c on c.id = b.bs_items_record_id");
        sqlbf1.append(" LEFT JOIN t_approved_items d on d.id = c.bs_items_id");
        sqlbf1.append(" WHERE d.bs_type = '22' and c.bs_supp_id = :suppId");
        if(approvedLevel.equals("review")){
            sqlbf1.append(" and c.bs_priority in (1,3)");
        }else if(approvedLevel.equals("coach")){
            sqlbf1.append(" and c.bs_priority = 2");
        }else{}
        sqlbf1.append(" order by a.id asc");
        List<Map<String, Object>> list = super.findBySql(sqlbf1.toString(), param);
        return ApiResponseResult.success().data(list);
    }
}
