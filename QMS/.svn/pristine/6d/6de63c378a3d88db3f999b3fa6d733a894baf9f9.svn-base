package com.unind.qms.web.sample.service.internal;

import com.unind.base.data.ApiResponseResult;
import com.unind.base.dbconnection.query.Datagrid;
import com.unind.base.domain.admin.enumeration.BaseEnumConstants;
import com.unind.base.domain.admin.enumeration.BooleanStateEnum;
import com.unind.base.provider.BaseOprService;
import com.unind.base.provider.BusinessException;
import com.unind.base.provider.context.SessionContextUtils;
import com.unind.qms.web.sample.dao.SampleRegularDao;
import com.unind.qms.web.sample.entity.SampleRegular;
import com.unind.qms.web.sample.service.SampleRegularService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springside.modules.persistence.SearchFilter;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
@Transactional(rollbackFor = BusinessException.class)
public class SampleRegularImpl extends BaseOprService implements SampleRegularService {
    @Autowired
    private SampleRegularDao sampleRegularDao;

    @Transactional
    public ApiResponseResult add(SampleRegular sampleRegular) throws BusinessException {
        if (null == sampleRegular || null == sampleRegular.getBsPrId()) {
            return ApiResponseResult.failure("产品ID为必填项");
        }
        if (StringUtils.isEmpty(sampleRegular.getBsName()) || StringUtils.isEmpty(sampleRegular.getBsName().trim())) {
            return ApiResponseResult.failure("规格名称不能为空");
        }
        sampleRegular.setBsName(sampleRegular.getBsName().trim());
        sampleRegular.setBsTool(sampleRegular.getBsTool().trim());
        sampleRegular.setBsUnit(sampleRegular.getBsUnit().trim());

        sampleRegular.setBsCreatedTime(new Date());
        sampleRegular.setPkCreatedBy(SessionContextUtils.getCurrentUser().getId());
//        sampleRegular.setPkCreatedBy(Long.parseLong("1"));
        sampleRegularDao.save(sampleRegular);
        return ApiResponseResult.success("新增成功！").data(sampleRegular);
    }

    @Transactional
    public ApiResponseResult edit(SampleRegular sampleRegular) throws BusinessException {
        if (null == sampleRegular || null == sampleRegular.getId()) {
            return ApiResponseResult.failure("记录ID为必填项");
        }
        if (StringUtils.isEmpty(sampleRegular.getBsName()) || StringUtils.isEmpty(sampleRegular.getBsName().trim())) {
            return ApiResponseResult.failure("规格名称不能为空");
        }
        SampleRegular o = sampleRegularDao.findOne(sampleRegular.getId());
        if (null == o) {
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
//        if (!StringUtils.equals(approvedFlow.getBsName().trim(), o.getBsName())) {
//            int counts = approvedFlowDao.countByBsName(approvedFlow.getBsName());
//            if (counts > 0) {
//                return ApiResponseResult.failure("项目名称不能重复");
//            }
//            o.setBsName(approvedFlow.getBsName().trim());
//        }
        o.setBsName(sampleRegular.getBsName());
        o.setBsTool(sampleRegular.getBsTool().trim());
        o.setBsUnit(sampleRegular.getBsUnit().trim());
        o.setBsRemark(sampleRegular.getBsRemark());

        o.setBsModifiedTime(new Date());
		o.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
//        o.setPkModifiedBy(Long.parseLong("1"));
        sampleRegularDao.save(o);
        return ApiResponseResult.success("修改成功！").data(o);
    }

    @Transactional
    public ApiResponseResult delete(Long id) throws BusinessException {
        SampleRegular o = sampleRegularDao.findOne(id);
        if (null == o) {
            return ApiResponseResult.failure("记录ID不存在或已被删除").status("error1");
        }
        if (o.getId() <= 0) {
            return ApiResponseResult.failure("没有操作权限");
        }
        o.setBsIsDel(BooleanStateEnum.TRUE.intValue());
        sampleRegularDao.save(o);
        return ApiResponseResult.success("删除成功！");
    }

    @Transactional(readOnly = true)
    public ApiResponseResult getlist(Long bsPrId, PageRequest pageRequest) {
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BaseEnumConstants.FALSE));
        if (bsPrId != null) {
            filters.add(new SearchFilter("bsPrId", SearchFilter.Operator.EQ, bsPrId));
        }
        Specifications<SampleRegular> spec = Specifications.where(super.and(filters, SampleRegular.class));
        Page<SampleRegular> page = sampleRegularDao.findAll(spec, pageRequest);
        return ApiResponseResult.success().data(Datagrid.create(page.getContent(), (int) page.getTotalElements(), pageRequest.getPageNumber() + 1, pageRequest.getPageSize()));
    }
}
