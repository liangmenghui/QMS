package com.unind.qms.web.risk.service.internal;

import com.fasterxml.jackson.databind.ser.Serializers;
import com.unind.base.data.ApiResponseResult;
import com.unind.base.dbconnection.query.Datagrid;
import com.unind.base.domain.admin.enumeration.BaseEnumConstants;
import com.unind.base.domain.admin.enumeration.BooleanStateEnum;
import com.unind.base.provider.BaseOprService;
import com.unind.base.provider.BusinessException;
import com.unind.base.provider.context.SessionContextUtils;
import com.unind.qms.enumeration.BasicEnumConstants;
import com.unind.qms.web.risk.dao.RiskLevelRecordDao;
import com.unind.qms.web.risk.entity.RiskLevelRecord;
import com.unind.qms.web.risk.entity.SupplierRisk;
import com.unind.qms.web.risk.service.RiskLevelRecordService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springside.modules.persistence.SearchFilter;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * @author Shen
 */
@Service
@Transactional(rollbackFor = BusinessException.class)
public class RiskLevelRecordImpl extends BaseOprService implements RiskLevelRecordService {

    @Autowired
    private RiskLevelRecordDao riskLevelRecordDao;

    @Override
    @Transactional
    public ApiResponseResult add(RiskLevelRecord riskLevelRecord) throws BusinessException {
        if(null == riskLevelRecord.getBsPrId() && null == riskLevelRecord.getBsSuppId()){
            return ApiResponseResult.failure("产品ID与供应商ID不能同时为空");
        }
        if(null == riskLevelRecord.getBsApplicantId()){
            return ApiResponseResult.failure("申请人ID为必填项");
        }
        if(riskLevelRecord.getBsType() != BasicEnumConstants.TODO_SUPP_RISK && riskLevelRecord.getBsType() != BasicEnumConstants.TODO_PR_RISK){
            return ApiResponseResult.failure("类型必须为供应商风险管理或者产品风险管理");
        }
        //添加批准人
        riskLevelRecord.setBsApproverId(SessionContextUtils.getCurrentUser().getId());
        //添加创建时间
        riskLevelRecord.setBsCreatedTime(new Date());
        riskLevelRecordDao.save(riskLevelRecord);
        return ApiResponseResult.success("新增成功！").data(riskLevelRecord);
    }

    @Override
    @Transactional
    public ApiResponseResult edit(RiskLevelRecord riskLevelRecord) throws BusinessException {
        if(null == riskLevelRecord.getId()){
            return ApiResponseResult.failure("记录ID为必填项");
        }
        if(null == riskLevelRecord.getBsPrId() && null == riskLevelRecord.getBsSuppId()){
            return ApiResponseResult.failure("产品ID与供应商ID不能同时为空");
        }
        if(null == riskLevelRecord.getBsApplicantId() && null == riskLevelRecord.getBsApproverId()){
            return ApiResponseResult.failure("申请人ID与批准人ID为必填项");
        }
        if(riskLevelRecord.getBsType() != BasicEnumConstants.TODO_SUPP_RISK || riskLevelRecord.getBsType() != BasicEnumConstants.TODO_PR_RISK){
            return ApiResponseResult.failure("类型必须为供应商风险管理或者产品风险管理");
        }
        RiskLevelRecord o = riskLevelRecordDao.findOne(riskLevelRecord.getId());
        if(null == o){
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
        o.setBsAdvice(riskLevelRecord.getBsAdvice());
        riskLevelRecordDao.save(o);
        return ApiResponseResult.success("修改成功！").data(o);
    }

    @Override
    @Transactional
    public ApiResponseResult delete(Long id) throws BusinessException {
        if(null == id){
            return ApiResponseResult.failure("记录ID为必填项");
        }
        RiskLevelRecord riskLevelRecord = riskLevelRecordDao.findOne(id);
        if(null == riskLevelRecord){
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
        riskLevelRecord.setBsIsDel((BooleanStateEnum.TRUE.intValue()));
        riskLevelRecordDao.save(riskLevelRecord);
        return ApiResponseResult.success("删除成功！");
    }

    @Override
    @Transactional
    public ApiResponseResult getlist(Integer bsType, Long bsPrSuppId, PageRequest pageRequest) throws BusinessException {
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BaseEnumConstants.FALSE));
        if(bsType != null){
            filters.add(new SearchFilter("bsType", SearchFilter.Operator.EQ, bsType));
            if(bsPrSuppId != null && bsType == BasicEnumConstants.TODO_SUPP_RISK){
                filters.add(new SearchFilter("bsSuppId", SearchFilter.Operator.EQ,bsPrSuppId));
            }
            if(bsPrSuppId != null && bsType == BasicEnumConstants.TODO_PR_RISK){
                filters.add(new SearchFilter("bsPrId", SearchFilter.Operator.EQ,bsPrSuppId));
            }
        }
        Specification<RiskLevelRecord> spec = Specifications.where(super.and(filters, RiskLevelRecord.class));
        Page<RiskLevelRecord> page = riskLevelRecordDao.findAll(spec, pageRequest);
        return ApiResponseResult.success().data(Datagrid.create(page.getContent(), (int) page.getTotalElements(), pageRequest.getPageNumber() + 1, pageRequest.getPageSize()));
    }
}
