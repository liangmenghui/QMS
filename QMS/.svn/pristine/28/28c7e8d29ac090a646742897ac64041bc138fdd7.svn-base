package com.unind.qms.web.risk.service.internal;

import com.unind.base.data.ApiResponseResult;
import com.unind.base.dbconnection.query.Datagrid;
import com.unind.base.domain.admin.enumeration.BaseEnumConstants;
import com.unind.base.domain.admin.enumeration.BooleanStateEnum;
import com.unind.base.provider.BaseOprService;
import com.unind.base.provider.BusinessException;
import com.unind.base.provider.context.SessionContextUtils;
import com.unind.qms.web.basic.dao.FeedbackInfoDao;
import com.unind.qms.web.basic.entity.FeedbackInfo;
import com.unind.qms.web.product.dao.ProductInfoDao;
import com.unind.qms.web.product.entity.ProductInfo;
import com.unind.qms.web.risk.dao.ProductRiskDao;
import com.unind.qms.web.risk.entity.ProductRisk;
import com.unind.qms.web.risk.service.ProductRiskService;
import com.unind.qms.web.shipment.dao.ShipmentInspectDao;
import com.unind.qms.web.shipment.entity.ShipmentInspect;
import com.unind.qms.web.shipment.entity.ShipmentInspectRecord;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springside.modules.persistence.SearchFilter;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * 产品风险管理信息
 */
@Service
@Transactional(rollbackFor = BusinessException.class)
public class ProductRiskImpl extends BaseOprService implements ProductRiskService {
    @Autowired
    private ProductRiskDao productRiskDao;
    @Autowired
    private ProductInfoDao productInfoDao;
    @Autowired
    private ShipmentInspectDao shipmentInspectDao;
    @Autowired
    private FeedbackInfoDao feedbackInfoDao;

    /**
     * 添加产品风险管理信息
     * @param productRisk
     * @return
     * @throws BusinessException
     */
    @Transactional
    public ApiResponseResult add(ProductRisk productRisk) throws BusinessException {
        if (null == productRisk || null == productRisk.getBsPrId()) {
            return ApiResponseResult.failure("产品ID为必填项");
        }
        int count = productRiskDao.countByBsPrId(productRisk.getBsPrId());
        if(count > 0){
            return ApiResponseResult.failure("产品已存在");
        }
        //1.添加创建时间
        productRisk.setBsCreatedTime(new Date());

        //2.添加type值
        //所有得分类型默认为1
        productRisk.setBsMassProductType((productRisk.getBsMassProductType() == 0) ? 1 : productRisk.getBsMassProductType());
        productRisk.setBsApprovedType((productRisk.getBsApprovedType() == 0) ? 1 : productRisk.getBsApprovedType());
        //productRisk.setBsStandardType((productRisk.getBsStandardType() == 0) ? 1 : productRisk.getBsStandardType());
        productRisk.setBsCpkType((productRisk.getBsCpkType() == 0) ? 1 : productRisk.getBsCpkType());
        productRisk.setBsGrrType((productRisk.getBsGrrType() == 0) ? 1 : productRisk.getBsGrrType());
        productRisk.setBsEngineeringType((productRisk.getBsEngineeringType() == 0) ? 1 : productRisk.getBsEngineeringType());
        productRisk.setBsInspectType((productRisk.getBsInspectType() == 0) ? 1 : productRisk.getBsInspectType());
        productRisk.setBsFeedbackType((productRisk.getBsFeedbackType() == 0) ? 1 : productRisk.getBsFeedbackType());
        productRisk.setBsPpmType((productRisk.getBsPpmType() == 0) ? 1 : productRisk.getBsPpmType());
        productRisk.setBsProjectType((productRisk.getBsProjectType() == 0) ? 1 : productRisk.getBsProjectType());

        //3.添加value值，并修改对应type值
        productRisk = updateValueType(productRisk);

        //4.计算各项得分和总得分
        productRisk.setBsMassProductScore(productRisk.getBsMassProductType() * 3);
        productRisk.setBsApprovedScore(productRisk.getBsApprovedType() * 2);
        productRisk.setBsCpkScore(productRisk.getBsCpkType() * 2);
        productRisk.setBsGrrScore(productRisk.getBsGrrType() * 2);
        productRisk.setBsEngineeringScore(productRisk.getBsEngineeringType() * 3);
        productRisk.setBsInspectScore(productRisk.getBsInspectType() *3);
        productRisk.setBsFeedbackScore(productRisk.getBsFeedbackType() * 3);
        productRisk.setBsPpmScore(productRisk.getBsPpmType() * 2);
        productRisk.setBsRiskScore(productRisk.getBsMassProductScore() + productRisk.getBsApprovedScore() + productRisk.getBsCpkScore()
                        + productRisk.getBsGrrScore() + productRisk.getBsEngineeringScore() + productRisk.getBsInspectScore()
                        + productRisk.getBsFeedbackScore() + productRisk.getBsPpmScore());

        //5.统计风险等级（1-5级）
        //判断直升高风险类型是否达到高风险（type为5），满足要求直升高风险
        int level = 1;
        if(productRisk.getBsMassProductType() == 5 || productRisk.getBsEngineeringType() == 5 || productRisk.getBsInspectType() == 5
                || productRisk.getBsFeedbackType() == 5 || productRisk.getBsProjectType() == 1 || productRisk.getBsProjectType() == 3) {
            //直升高风险
            level = 5;
        }else{
            int totalScore = productRisk.getBsRiskScore();
            if(totalScore >= 0 && totalScore <= 40){
            }
            if(totalScore >= 41 && totalScore <= 55){
                level = 2;
            }
            if(totalScore >= 56 && totalScore <= 70){
                level = 3;
            }
            if(totalScore >= 71 && totalScore <= 85){
                level = 4;
            }
            if(totalScore >= 86 && totalScore <= 100){
                level = 5;
            }
        }
        productRisk.setBsRiskLevel(level);
        productRiskDao.save(productRisk);

        //6.更新到产品信息表的系统风险等级
        ProductInfo productInfo = productInfoDao.findOne(productRisk.getBsPrId());
        if(productInfo != null){
            productInfo.setBsRiskLevelSys(level);     //风险等级（系统）
            productInfo.setBsRiskTimeSys(new Date());
            productInfo.setBsModifiedTime(new Date());
            productInfo.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
            //如果产品风险管理模式为自动，则修改风险等级；如果为手动，则不必修改
            if(productInfo.getBsRiskManual() == BooleanStateEnum.FALSE.intValue()){
                productInfo.setBsRiskScore(productRisk.getBsRiskScore());
                productInfo.setBsRiskLevel(level);
            }
            productInfoDao.save(productInfo);
        }

        return ApiResponseResult.success("新增成功！").data(productRisk);
    }

    /**
     * 修改产品风险管理信息
     * @param productRisk
     * @return
     * @throws BusinessException
     */
    @Transactional
    public ApiResponseResult edit(ProductRisk productRisk) throws BusinessException {
        if (null == productRisk || null == productRisk.getId()) {
            return ApiResponseResult.failure("记录ID为必填项");
        }
        if (null == productRisk.getBsPrId()) {
            return ApiResponseResult.failure("产品ID不能为空");
        }
        ProductRisk o = productRiskDao.findOne(productRisk.getId());
        if (null == o) {
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }

        //1.修改时间
        o.setBsModifiedTime(new Date());
        o.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
        o.setBsMassProductType(productRisk.getBsMassProductType());
        o.setBsApprovedType(productRisk.getBsApprovedType());
        o.setBsCpkType(productRisk.getBsCpkType());
        o.setBsGrrType(productRisk.getBsGrrType());
        o.setBsEngineeringType(productRisk.getBsEngineeringType());
        o.setBsInspectType(productRisk.getBsInspectType());
        o.setBsFeedbackType(productRisk.getBsFeedbackType());
        o.setBsPpmType(productRisk.getBsPpmType());
        o.setBsProjectType(productRisk.getBsProjectType());

        //2.修改value值，并修改对应type值
        o = updateValueType(o);

        //3.计算各项得分和总得分
        o.setBsMassProductScore(o.getBsMassProductType() * 3);
        o.setBsApprovedScore(o.getBsApprovedType() * 2);
        o.setBsCpkScore(o.getBsCpkType() * 2);
        o.setBsGrrScore(o.getBsGrrType() * 2);
        o.setBsEngineeringScore(o.getBsEngineeringType() * 3);
        o.setBsInspectScore(o.getBsInspectType() *3);
        o.setBsFeedbackScore(o.getBsFeedbackType() * 3);
        o.setBsPpmScore(o.getBsPpmType() * 2);
        o.setBsRiskScore(o.getBsMassProductScore() + o.getBsApprovedScore() + o.getBsCpkScore()
                + o.getBsGrrScore() + o.getBsEngineeringScore() + o.getBsInspectScore()
                + o.getBsFeedbackScore() + o.getBsPpmScore());

        //4.统计风险等级（1-5级）
        //判断直升高风险类型是否达到高风险（type为5），满足要求直升高风险
        int level = 1;
        if(o.getBsMassProductType() == 5 || o.getBsEngineeringType() == 5 || o.getBsInspectType() == 5
                || o.getBsFeedbackType() == 5 || o.getBsProjectType() == 1 || o.getBsProjectType() == 3) {
            //直升高风险
            level = 5;
        }else{
            int totalScore = o.getBsRiskScore();
            if(totalScore >= 0 && totalScore <= 40){
            }
            if(totalScore >= 41 && totalScore <= 55){
                level = 2;
            }
            if(totalScore >= 56 && totalScore <= 70){
                level = 3;
            }
            if(totalScore >= 71 && totalScore <= 85){
                level = 4;
            }
            if(totalScore >= 86 && totalScore <= 100){
                level = 5;
            }
        }
        o.setBsRiskLevel(level);
        productRiskDao.save(o);

        //5.更新到产品信息表的系统风险等级
        ProductInfo productInfo = productInfoDao.findOne(o.getBsPrId());
        if(productInfo != null){
            productInfo.setBsRiskLevelSys(level);     //风险等级（系统）
            productInfo.setBsRiskTimeSys(new Date());
            productInfo.setBsModifiedTime(new Date());
            productInfo.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
            //如果产品风险管理模式为自动，则修改风险等级；如果为手动，则不必修改
            if(productInfo.getBsRiskManual() == BooleanStateEnum.FALSE.intValue()){
                productInfo.setBsRiskScore(o.getBsRiskScore());
                productInfo.setBsRiskLevel(level);
            }
            productInfoDao.save(productInfo);
        }

        return ApiResponseResult.success("修改成功！").data(o);
    }

    /**
     * 获取产品风险管理信息
     * @param bsPrId
     * @param pageRequest
     * @return
     */
    @Transactional(readOnly = true)
    public ApiResponseResult getlist(Long bsPrId, PageRequest pageRequest) {
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BaseEnumConstants.FALSE));
        if (bsPrId != null) {
            filters.add(new SearchFilter("bsPrId", SearchFilter.Operator.EQ, bsPrId));
        }
        Specifications<ProductRisk> spec = Specifications.where(super.and(filters, ProductRisk.class));
        Page<ProductRisk> page = productRiskDao.findAll(spec, pageRequest);
        return ApiResponseResult.success().data(Datagrid.create(page.getContent(), (int) page.getTotalElements(), pageRequest.getPageNumber() + 1, pageRequest.getPageSize()));
    }

    /**
     * 更新产品风险信息表的value及type
     * @param productRisk
     * @return
     * @throws BusinessException
     */
    public ProductRisk updateValueType(ProductRisk productRisk) throws BusinessException{
        Sort sort = new Sort(Sort.Direction.DESC, "bsCreatedTime");
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BooleanStateEnum.FALSE.intValue()));
        filters.add(new SearchFilter("bsPrId", SearchFilter.Operator.EQ, productRisk.getId()));
        Specification<ShipmentInspect> spec = Specifications.where(super.and(filters, ShipmentInspect.class));
        List<ShipmentInspect> shipmentInspectList = shipmentInspectDao.findAll(spec, sort);
        if(shipmentInspectList.size() > 0){
            //1.取最近一份产品出货检验报告的ppmValue
            //产品的ppm值从最近的一次产品出货检验报告中获取,计算公式：(不良品/检验数) * 10^6
            ShipmentInspect shipmentInspect = shipmentInspectList.get(0);
            double ppmValue = (shipmentInspect.getBsSampleResult() / shipmentInspect.getBsSamplesNum()) * 1000000;  //(不良品/检验数) * 10^6
            productRisk.setBsPpmValue(ppmValue);  //ppm值
            if(ppmValue <= 50){
                productRisk.setBsPpmType(1);
            }
            if(ppmValue > 50 && ppmValue <= 200){
                productRisk.setBsPpmType(2);
            }
            if(ppmValue > 200 && ppmValue <= 500){
                productRisk.setBsPpmType(3);
            }
            if(ppmValue > 500 && ppmValue <= 1000){
                productRisk.setBsPpmType(4);
            }
            if(ppmValue > 1000){
                productRisk.setBsPpmType(5);
            }
            //2.统计出货检验不合格次数inspectValue
            double inspectValue = 0;
            boolean isTriple = false; //是否连续三次验货不合格
            for(int i = 0; i < shipmentInspectList.size(); i++){
                //
                List<ShipmentInspectRecord> item = new ArrayList<ShipmentInspectRecord>(shipmentInspectList.get(i).getRecordSet());
                Collections.sort(item, new Comparator<ShipmentInspectRecord>() {
                    @Override
                    public int compare(ShipmentInspectRecord o1, ShipmentInspectRecord o2) {
                        return o1.getId() < o2.getId() ? -1 :1;
                    }
                });
                if(item.get(item.size()-1).getBsResult() == 2){
                    inspectValue++;
                    if(i >= 2){
                        //
                        List<ShipmentInspectRecord> item2 = new ArrayList<ShipmentInspectRecord>(shipmentInspectList.get(i - 1).getRecordSet());
                        Collections.sort(item2, new Comparator<ShipmentInspectRecord>() {
                            @Override
                            public int compare(ShipmentInspectRecord o1, ShipmentInspectRecord o2) {
                                return o1.getId() < o2.getId() ? -1 :1;
                            }
                        });
                        //
                        List<ShipmentInspectRecord> item3 = new ArrayList<ShipmentInspectRecord>(shipmentInspectList.get(i - 2).getRecordSet());
                        Collections.sort(item3, new Comparator<ShipmentInspectRecord>() {
                            @Override
                            public int compare(ShipmentInspectRecord o1, ShipmentInspectRecord o2) {
                                return o1.getId() < o2.getId() ? -1 :1;
                            }
                        });
                        if(item2.get(item.size()-1).getBsResult() == 2 && item3.get(item.size()-1).getBsResult() == 2){
                            isTriple = true;
                        }
                    }
                }
            }
            productRisk.setBsInspectValue(inspectValue);  //验货不合格次数
            if(inspectValue == 0){
                productRisk.setBsInspectType(1);
            }
            if(inspectValue == 1){
                productRisk.setBsInspectType(2);
            }
            if(inspectValue >= 2){
                productRisk.setBsInspectType(3);
            }
            if(inspectValue >= 3){
                productRisk.setBsInspectType(4);
            }
            if(isTriple){  //连续发生三次以上
                productRisk.setBsInspectType(5);
            }
        }
        //3.取最近一次客诉的时间判断type
        List<SearchFilter> filters2 = new ArrayList<SearchFilter>();
        filters2.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BooleanStateEnum.FALSE.intValue()));
        filters2.add(new SearchFilter("bsPrId", SearchFilter.Operator.EQ, productRisk.getId()));
        Specification<FeedbackInfo> spec2 = Specifications.where(super.and(filters, FeedbackInfo.class));
        List<FeedbackInfo> feedbackInfoList = feedbackInfoDao.findAll(spec2, sort);
        if(feedbackInfoList.size() <= 0){
            productRisk.setBsFeedbackType(1);
        }else if(feedbackInfoList.get(0).getBsStatus() == 0){
            productRisk.setBsFeedbackType(5);
        }else{
            int feedbackDays = getDays(feedbackInfoList.get(0).getBsCreatedTime(), new Date());
            if(feedbackDays > 180){
                productRisk.setBsFeedbackType(2);
            }
            if(feedbackDays > 90 && feedbackDays <= 180){
                productRisk.setBsFeedbackType(3);
            }
            if(feedbackDays <= 90){
                productRisk.setBsFeedbackType(4);
            }
        }

        //4.取产品的创建时间来判断type
        ProductInfo productInfo = productInfoDao.findOne(productRisk.getBsPrId());
        if(productInfo != null){
            int subDays = getDays(productInfo.getBsCreatedTime(), new Date());
            if(subDays <= 90){
                productRisk.setBsProjectType(1);
            }
        }

        return productRisk;
    }

    /**
     * 计算相差天数
     * @param start
     * @param end
     * @return
     */
    public int getDays(Date start, Date end) {
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        try {
            return (int) ((df.parse(df.format(end)).getTime() -df.parse(df.format(start)).getTime()) / (24 * 60 * 60 * 1000));
        } catch (ParseException e) {
            e.printStackTrace();
            return 0;
        }
    }
}
