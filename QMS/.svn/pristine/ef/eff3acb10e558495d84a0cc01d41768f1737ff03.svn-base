package com.unind.qms.provider;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.unind.base.data.ApiResponseResult;
import com.unind.base.domain.admin.enumeration.BaseEnumConstants;
import com.unind.base.domain.admin.enumeration.BooleanStateEnum;
import com.unind.base.provider.BusinessException;
import com.unind.base.utils.GsonUtils;
import com.unind.qms.enumeration.BasicEnumConstants;
import com.unind.qms.enumeration.BasicStateEnum;
import com.unind.qms.web.product.dao.ProductInfoDao;
import com.unind.qms.web.product.entity.ProductInfo;
import com.unind.qms.web.risk.dao.ProductRiskDao;
import com.unind.qms.web.risk.dao.SupplierRiskDao;
import com.unind.qms.web.risk.entity.ProductRisk;
import com.unind.qms.web.risk.entity.SupplierRisk;
import com.unind.qms.web.risk.service.SupplierRiskService;
import com.unind.qms.web.supplier.dao.SupplierInfoDao;
import com.unind.qms.web.supplier.entity.SupplierInfo;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.springside.modules.persistence.SearchFilter;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

@Component
public class HttpScheduledService {

    public final Logger logger = LoggerFactory.getLogger(this.getClass());
    @Autowired
    private ProductInfoDao productInfoDao;
    @Autowired
    private ProductRiskDao productRiskDao;
    @Autowired
    private SupplierInfoDao supplierInfoDao;
    @Autowired
    private SupplierRiskDao supplierRiskDao;
    @Autowired
    private HttpClientService httpClientService;

    @Scheduled(cron = "0 0 0 * * ? ")
    @Transactional(value = "txManager2")
    public void getHttpClient() throws BusinessException {
        try {
            List<ProductInfo> productInfoList = new ArrayList<ProductInfo>();
            String url = "http://nanbo.f3322.net:8165/openapi/v1/prod/getitemandvendor";
            ApiResponseResult apiResponseResult = httpClientService.getHttpClient(url);
            if(apiResponseResult.isResult()){
                JsonObject jsonObject = GsonUtils.getJsonObject(apiResponseResult.getData().toString());
                JsonArray jsonArray = jsonObject.get("data").getAsJsonArray();

                for(JsonElement jsonElement : jsonArray){
                    JsonObject jsonObject1 = jsonElement.getAsJsonObject();

                    String bsPrCode = this.get(jsonObject1, "ITEM_NUM", true, "");
                    String bsSuppCode = this.get(jsonObject1, "VENDOR_NUM", true, "");
                    String bsOrgIo = this.get(jsonObject1, "ORG_NAME", true, "");
                    //产品编号、供应商编号、组织是否为空
                    if(StringUtils.isEmpty(bsPrCode)||StringUtils.isEmpty(bsSuppCode)||StringUtils.isEmpty(bsOrgIo)){
                        continue;
                    }
                    //判断是否存在此产品
                    int counts = productInfoDao.countByBsPrCodeAndBsSuppCodeAndBsOrgIo(bsPrCode, bsSuppCode, bsOrgIo);
                    if (counts > 0) {
                        continue;
                    }
                    ProductInfo productInfo = new ProductInfo();
                    productInfo.setBsPrCode(bsPrCode);
                    productInfo.setBsPrName(this.get(jsonObject1, "ITEM_DESC", true, ""));
                    productInfo.setBsSuppCode(bsSuppCode);
                    productInfo.setBsSuppChieseName(this.get(jsonObject1, "VENDOR_NAME", true, ""));
                    productInfo.setBsPrType(this.get(jsonObject1, "CATE_DESC", true, ""));
                    productInfo.setBsOrgIo(bsOrgIo);
                    productInfo.setBsBlueprintNo(this.get(jsonObject1, "PAPER_NUM", true, ""));
                    productInfo.setBsBlueprintVersion(this.get(jsonObject1, "PAPER_VERSION", true, ""));
                    productInfo.setBsCreatedTime(new Date());
                    productInfoList.add(productInfo);
                }
                productInfoDao.save(productInfoList);
            }
        } catch (BusinessException e) {
            e.printStackTrace();
            logger.error("定时导入产品信息失败", e);
        }
    }

    public static String get(JsonObject jsonObject, String key, boolean flag, String defVal) {
        try {
            return jsonObject.get(key).isJsonNull() ? "" : jsonObject.get(key).getAsString();
        } catch (NullPointerException e) {
            if (flag) {
                return defVal;
            }else {
                throw new NullPointerException(" property: "+key+" is not found");
            }
        }
    }

    /**
     * 供应商风险等级得分定时更新
     * @throws BusinessException
     */
    @Scheduled(cron = "0 0 1 1 * ? ")
    @Transactional(value = "txManager2")
    public void updateSupplierRisk() throws BusinessException{
        try{
            List<SupplierRisk> supplierRiskList = new ArrayList<SupplierRisk>();
            List<SupplierInfo> supplierInfoList = new ArrayList<SupplierInfo>();
            //Iterator Iterator = supplierRiskDao.findAll().iterator();
            Iterator Iterator = supplierRiskDao.findByBsIsDel(BooleanStateEnum.FALSE.intValue()).iterator();
            while(Iterator.hasNext()){
                SupplierRisk o = (SupplierRisk) Iterator.next();
                //1.更新到供应商风险信息表
                //统计各项得分
                o.setBsFeedbackScore(o.getBsFeedbackType() * 3);
                o.setBsPpmScore(o.getBsPpmType() * 2);
                o.setBsDeliveryScore(o.getBsDeliveryType() * 3);
                o.setBsInspectScore(o.getBsInspectType() * 2);
                o.setBsPaymentScore(o.getBsPaymentType() * 1);
                o.setBsCpkScore(o.getBsCpkType() * 2);
                o.setBsDangerProScore(o.getBsDangerProType() * 2);
                o.setBsApprovedScore(o.getBsApproveType() * 2);
                o.setBsEhsScore(o.getBsEhsType() * 2);
                o.setBsBusinessScore((o.isBsComStability() ? 1 : 0) + (o.isBsAntiCorruptProtocol() ? 1 : 0 )
                        + (o.isBsLongTermProtocol() ? 1 : 0 ) + (o.isBsCooperProtocol() ? 1 : 0 )
                        + (o.isBsBusinessBroScore() ? 1 : 0) * 2);
                //统计总得分
                o.setBsRiskScore(o.getBsFeedbackScore() + o.getBsPpmScore() + o.getBsDeliveryScore() + o.getBsInspectScore()
                        + o.getBsPaymentScore() + o.getBsCpkScore() + o.getBsDangerProScore() + o.getBsApprovedScore()
                        + o.getBsEhsScore() + o.getBsBusinessScore());
                //统计风险等级
                int level = 1;
                int totalScore = o.getBsRiskScore();
                if(totalScore >= 0 && totalScore <= 40){
                }
                if(totalScore >= 41 && totalScore <= 55){
                    level = 2;
                }
                if(totalScore >= 56 && totalScore <= 70){
                    level = 3;
                }
                if(totalScore >= 71 && totalScore <= 85){
                    level = 4;
                }
                if(totalScore >= 86 && totalScore <= 100){
                    level = 5;
                }
                o.setBsRiskLevel(level);
                //更新时间
                o.setBsModifiedTime(new Date());
                supplierRiskList.add(o);

                //2.更新到供应商信息表
                SupplierInfo supplierInfo = supplierInfoDao.findOne(o.getBsSuppId());
                if(supplierInfo != null){
                    supplierInfo.setBsRiskLevelSys(o.getBsRiskLevel());
                    supplierInfo.setBsRiskTimeSys(new Date());
                    supplierInfoList.add(supplierInfo);
                }
            }
            if(supplierRiskList.size() > 0){
                supplierRiskDao.save(supplierRiskList);
            }
            if(supplierInfoList.size() > 0){
                supplierInfoDao.save(supplierInfoList);
            }
            logger.info("供应商自动更新等级成功！");
        }catch(Exception e){
            e.printStackTrace();
            logger.error("供应商自动更新等级失败！", e);
        }
    }

    /**
     * 产品风险等级得分定时更新
     * @throws BusinessException
     */
    @Scheduled(cron = "0 0 2 1 * ? ")
    @Transactional(value = "txManager2")
    public void updateProductRisk() throws BusinessException{
        try{
            List<ProductRisk> productRiskList = new ArrayList<ProductRisk>();
            List<ProductInfo> productInfoList = new ArrayList<ProductInfo>();
            //Iterator iterator = productRiskDao.findAll().iterator();
            Iterator iterator = productRiskDao.findByBsIsDel(BooleanStateEnum.FALSE.intValue()).iterator();
            while(iterator.hasNext()){
                ProductRisk o = (ProductRisk) iterator.next();
                //1.更新到产品风险信息表
                //统计各项得分
                o.setBsMassProductScore(o.getBsMassProductType() * 3);
                o.setBsApprovedScore(o.getBsApprovedType() * 2);
                o.setBsStandardScore(o.getBsStandardScore() * 2);
                o.setBsCpkScore(o.getBsCpkType() * 2);
                o.setBsGrrScore(o.getBsGrrType() * 2);
                o.setBsEngineeringScore(o.getBsEngineeringType() * 3);
                o.setBsInspectScore(o.getBsInspectType() * 3);
                o.setBsFeedbackScore(o.getBsFeedbackType() * 3);
                o.setBsPpmScore(o.getBsPpmType() * 2);
                //统计总得分
                o.setBsRiskScore(o.getBsMassProductScore() + o.getBsApprovedType() + o.getBsStandardScore()
                    + o.getBsCpkScore() + o.getBsGrrScore() + o.getBsEngineeringScore() + o.getBsInspectScore()
                    + o.getBsFeedbackScore() + o.getBsPpmScore());
                //统计风险等级
                int level = 1;
                int totalScore = o.getBsRiskScore();
                if(totalScore >= 0 && totalScore <= 40){
                }
                if(totalScore >= 41 && totalScore <= 55){
                    level = 2;
                }
                if(totalScore >= 56 && totalScore <= 70){
                    level = 3;
                }
                if(totalScore >= 71 && totalScore <= 85){
                    level = 4;
                }
                if(totalScore >= 86 && totalScore <= 100){
                    level = 5;
                }
                o.setBsRiskLevel(level);
                //更新时间
                o.setBsModifiedTime(new Date());
                productRiskList.add(o);

                //2.更新到产品信息表
                ProductInfo productInfo = productInfoDao.findOne(o.getBsPrId());
                if(productInfo != null){
                    productInfo.setBsRiskLevelSys(o.getBsRiskLevel());
                    productInfo.setBsRiskTimeSys(new Date());
                    productInfoList.add(productInfo);
                }
            }
            if(productRiskList.size() > 0){
                productRiskDao.save(productRiskList);
            }
            if(productInfoList.size() > 0){
                productInfoDao.save(productInfoList);
            }
            logger.info("产品自动更新等级成功！");
        }catch(Exception e){
            e.printStackTrace();
            logger.error("产品自动更新等级失败", e);
        }
    }
}


