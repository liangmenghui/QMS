package com.unind.qms.web.supplier.service.internal;

import com.unind.base.configure.AppConfig;
import com.unind.base.dao.admin.SysRoleDao;
import com.unind.base.dao.admin.SysUserDao;
import com.unind.base.dao.admin.agg.SysUserRolesAggDao;
import com.unind.base.data.ApiResponseResult;
import com.unind.base.dbconnection.query.Datagrid;
import com.unind.base.domain.admin.agg.SysUserRolesAgg;
import com.unind.base.domain.admin.enumeration.BaseEnumConstants;
import com.unind.base.domain.admin.enumeration.BooleanStateEnum;
import com.unind.base.domain.admin.role.SysRole;
import com.unind.base.domain.admin.user.SysUser;
import com.unind.base.provider.BaseOprService;
import com.unind.base.provider.BusinessException;
import com.unind.base.provider.context.SessionContextUtils;
import com.unind.qms.App;
import com.unind.qms.enumeration.ApprovedStateEnum;
import com.unind.qms.enumeration.BasicEnumConstants;
import com.unind.qms.enumeration.BasicStateEnum;
import com.unind.qms.provider.HttpClientService;
import com.unind.qms.web.approved.entity.ApprovedFlow;
import com.unind.qms.web.approved.entity.ApprovedFlowRecord;
import com.unind.qms.web.basic.dao.TodoInfoDao;
import com.unind.qms.web.basic.entity.TodoInfo;
import com.unind.qms.web.risk.dao.RiskLevelRecordDao;
import com.unind.qms.web.risk.entity.RiskLevelRecord;
import com.unind.qms.web.supplier.dao.SupplierInfoDao;
import com.unind.qms.web.supplier.entity.SupplierInfo;
import com.unind.qms.web.supplier.service.SupplierInfoService;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springside.modules.persistence.SearchFilter;

import javax.sound.sampled.Line;
import java.util.*;

@Service
@Transactional(rollbackFor = BusinessException.class)
public class SupplierInfoImpl extends BaseOprService implements SupplierInfoService {
    @Autowired
    private SupplierInfoDao supplierInfoDao;
    @Autowired
    private TodoInfoDao todoInfoDao;
    @Autowired
    private SysUserDao sysUserDao;
    @Autowired
    private SysRoleDao sysRoleDao;
    @Autowired
    private RiskLevelRecordDao riskLevelRecordDao;
    @Autowired
    private HttpClientService httpClientService;
    @Autowired
    private AppConfig appConfig;
    @Autowired
    private SysUserRolesAggDao sysUserRolesAggDao;

    @Transactional
    public ApiResponseResult add(SupplierInfo supplierInfo) throws BusinessException {
        if (StringUtils.isEmpty(supplierInfo.getBsSuppCode()) || StringUtils.isEmpty(supplierInfo.getBsSuppCode().trim())) {
            return ApiResponseResult.failure("供应商编号不能为空");
        }
        if (StringUtils.isEmpty(supplierInfo.getBsSuppChieseName()) || StringUtils.isEmpty(supplierInfo.getBsSuppChieseName().trim())) {
            return ApiResponseResult.failure("中文名不能为空");
        }
        int counts = supplierInfoDao.countByBsSuppCode(supplierInfo.getBsSuppCode());
        if (counts > 0) {
            return ApiResponseResult.failure("供应商已存在");
        }
//        supplierInfo.setBsNo(supplierInfo.getBsNo().trim());
//        supplierInfo.setBsType(supplierInfo.getBsType());
//        supplierInfo.setBsSubtype(supplierInfo.getBsSubtype());
//        supplierInfo.setBsContent(supplierInfo.getBsContent());
//        supplierInfo.setBsStandard(supplierInfo.getBsStandard());
//        supplierInfo.setBsRemark(supplierInfo.getBsRemark());

        //1.添加供应商
        supplierInfo.setBsRiskLevel(0);
        supplierInfo.setBsRiskManual(0);
        supplierInfo.setBsRiskScore(0);
        supplierInfo.setBsCreatedTime(new Date());
//		supplierInfo.setPkCreatedBy(SessionContextUtils.getCurrentUser().getId());
//        supplierInfo.setPkCreatedBy(Long.parseLong("1"));
        supplierInfoDao.save(supplierInfo);

        //2.给角色为供应商发展经理的用户发送待办事项
        //2.1找到该角色下的角色ID
        List<SysRole> sysRoleList = sysRoleDao.findByBsCode("QMS_DEVELOPMENT_MANAGER");
        if(sysRoleList.size()==0){
            return ApiResponseResult.failure("无供应商发展经理角色！");
        }
        Long roleId = sysRoleList.get(0).getId();
        //2.2找到该角色下的用户ID
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("pkRole", SearchFilter.Operator.EQ, roleId));
        Specifications<SysUserRolesAgg> spec = Specifications.where(super.and(filters, SysUserRolesAgg.class));
        List<SysUserRolesAgg> sysUserRolesAggList = sysUserRolesAggDao.findAll(spec);
        if(sysUserRolesAggList.size() <= 0){
            return ApiResponseResult.failure("供应商新增成功，发送待办事项失败，供应商发展经理用户不存在！").data(roleId);
        }
        //2.3给该角色的用户添加待办事项
        List<TodoInfo> todoInfoList = new ArrayList<TodoInfo>();
        for(int i = 0; i < sysUserRolesAggList.size(); i++){
            TodoInfo todoInfo = new TodoInfo();
            todoInfo.setBsUserId(sysUserRolesAggList.get(i).getPkUser());  //用户ID
            todoInfo.setBsReferId(supplierInfo.getId());  //关联ID
            todoInfo.setBsExtend(supplierInfo.getId());   //扩展内容
            todoInfo.setBsRouter("/qms/supplier/approved");  //页面路由
            todoInfo.setBsTitle("[" + supplierInfo.getBsSuppChieseName() +"]" + "待进行初期评审");   //标题
            todoInfo.setBsStatus(BasicEnumConstants.TODO_NOFINISH);  //状态
            todoInfo.setBsSystemType(BasicStateEnum.TODO_QMSTYPE.intValue());  //系统状态
            todoInfo.setBsType(BasicEnumConstants.TODO_SUPP_SETUP);   //类型
            todoInfo.setBsStartTime(new Date());      //有效开始时间
//            //计算一周后的时间
//            Calendar curr = Calendar.getInstance();
//            curr.setTime(todoInfo.getBsStartTime());
//            curr.add(Calendar.WEEK_OF_YEAR, 1);
//            Date after7Days=curr.getTime();
//            todoInfo.setBsEndTime(after7Days);                  //有效结束时间
            todoInfo.setBsCreatedTime(new Date());    //创建时间
            todoInfo.setPkCreatedBy(Long.valueOf((long)1));
            todoInfoList.add(todoInfo);
        }
        todoInfoDao.save(todoInfoList);

        return ApiResponseResult.success("新增成功！");
    }

    @Transactional
    public ApiResponseResult edit(SupplierInfo supplierInfo) throws BusinessException {
        if (StringUtils.isEmpty(supplierInfo.getBsSuppCode()) || StringUtils.isEmpty(supplierInfo.getBsSuppCode().trim())) {
            return ApiResponseResult.failure("供应商编号不能为空");
        }
        if (StringUtils.isEmpty(supplierInfo.getBsSuppChieseName()) || StringUtils.isEmpty(supplierInfo.getBsSuppChieseName().trim())) {
            return ApiResponseResult.failure("中文名不能为空");
        }
        SupplierInfo o = new SupplierInfo();
        if (null == supplierInfo.getId()) {
            o = supplierInfoDao.findByBsSuppCode(supplierInfo.getBsSuppCode()).get(0);
        }else{
            o = supplierInfoDao.findOne(supplierInfo.getId());
        }
        if (null == o) {
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
//        o.setBsType(supplierInfo.getBsType());
//        o.setBsSubtype(supplierInfo.getBsSubtype());
//        o.setBsContent(supplierInfo.getBsContent());
//        o.setBsStandard(supplierInfo.getBsStandard());
//        o.setBsRemark(supplierInfo.getBsRemark());

        supplierInfo.setId(o.getId());
        supplierInfo.setBsRiskLevel(0);
        supplierInfo.setBsRiskManual(0);
        supplierInfo.setBsRiskScore(0);
        supplierInfo.setBsCreatedTime(o.getBsCreatedTime());
        supplierInfo.setBsVersion(o.getBsVersion());
        supplierInfo.setBsIsDel(o.getBsIsDel());
        supplierInfo.setBsModifiedTime(new Date());
        supplierInfo.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
//        supplierInfo.setPkModifiedBy(Long.parseLong("1"));
        supplierInfoDao.save(supplierInfo);
        return ApiResponseResult.success("修改成功！");
    }

    @Transactional
    public ApiResponseResult delete(Long id,String bsSuppCode) throws BusinessException {
        SupplierInfo o = new SupplierInfo();
        if (null == id) {
            o = supplierInfoDao.findByBsSuppCode(bsSuppCode).get(0);
        }else{
            o = supplierInfoDao.findOne(id);
        }
        if (null == o) {
            return ApiResponseResult.failure("记录ID不存在或已被删除").status("error1");
        }
        if (o.getId() <= 0) {
            return ApiResponseResult.failure("没有操作权限");
        }
        o.setBsIsDel(BooleanStateEnum.TRUE.intValue());
        supplierInfoDao.save(o);
        return ApiResponseResult.success("删除成功！");
    }

    @Transactional(readOnly = true)
    public ApiResponseResult getlist(String keyWord, Long id, String bsSuppCode, Integer bsIsApprove, String bsSuppStatus, Integer bsRiskLevel, PageRequest pageRequest) {
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BaseEnumConstants.FALSE));
        if (null != id) {
            filters.add(new SearchFilter("id", SearchFilter.Operator.EQ, id));
        }
        if (null != bsIsApprove) {
            filters.add(new SearchFilter("bsIsApprove", SearchFilter.Operator.EQ, bsIsApprove));
        }
        if (StringUtils.isNotEmpty(bsSuppStatus)){
            filters.add(new SearchFilter("bsSuppStatus", SearchFilter.Operator.EQ, bsSuppStatus));
        }
        if (null != bsRiskLevel){
            filters.add(new SearchFilter("bsRiskLevel", SearchFilter.Operator.EQ, bsRiskLevel));
        }
        if (StringUtils.isNotEmpty(bsSuppCode)){
            filters.add(new SearchFilter("bsSuppCode", SearchFilter.Operator.EQ, bsSuppCode));
        }
        List<SearchFilter> filters1 = new ArrayList<SearchFilter>();
        if (StringUtils.isNotEmpty(keyWord)) {
            filters1.add(new SearchFilter("bsSuppCode", SearchFilter.Operator.LIKE, keyWord));
            filters1.add(new SearchFilter("bsSuppChieseName", SearchFilter.Operator.LIKE, keyWord));
        }
        Specifications<SupplierInfo> spec = Specifications.where(super.and(filters, SupplierInfo.class));
        Specifications<SupplierInfo> spec1 = spec.and(super.or(filters1, SupplierInfo.class));
        Page<SupplierInfo> page = supplierInfoDao.findAll(spec1, pageRequest);
        return ApiResponseResult.success().data(Datagrid.create(page.getContent(), (int) page.getTotalElements(), pageRequest.getPageNumber() + 1, pageRequest.getPageSize()));
    }

    /**
     * 申请变更风险等级（添加待办事项）
     * @param id
     * @param bsRiskLevelUser
     * @param bsRiskDescUser
     * @return
     */
    @Transactional
    public ApiResponseResult applyRiskLevel(Long id, Integer bsRiskLevelUser, String bsRiskDescUser) throws BusinessException {
        //获取供应商信息表数据
        SupplierInfo supplierInfo = supplierInfoDao.findOne(id);
        if(null == supplierInfo){
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
        if (supplierInfo.getId() <= 0) {
            return ApiResponseResult.failure("没有操作权限");
        }
        //判断该供应商下是否存在进行中的申请，有则申请失败
        List<RiskLevelRecord> o = riskLevelRecordDao.findByBsSuppIdAndBsTypeAndBsResult(id, BasicEnumConstants.TODO_SUPP_RISK, 0);
        if(o.size() > 0){
            return ApiResponseResult.failure("存在进行中的风险等级修改申请，无法再次申请！");
        }
//        o.setBsRiskLevelUser(bsRiskLevelUser);
//        o.setBsRiskTimeUser(new Date());
//        o.setBsRiskDescUser(bsRiskDescUser);
//        o.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
//        o.setBsModifiedTime(new Date());
//        supplierInfoDao.save(o);

        //1.获取批准人ID
        Map<String, Object> param = new HashMap<String, Object>();
        StringBuffer sqlbf1 = new StringBuffer();
        param = new HashMap<String, Object>();
        param.put("roleCode","QMS_GENERAL_MANAGER");
        sqlbf1 = new StringBuffer();
        sqlbf1.append(" SELECT a.pk_user FROM sys_user_roles_agg a LEFT JOIN sys_role b ON a.pk_role = b.id");
        sqlbf1.append(" LEFT JOIN sys_user c on c.id = a.pk_user");
        sqlbf1.append(" WHERE b.bs_code = :roleCode AND c.bs_is_del = '0'");
        Map<String, Object> userMap = super.findOneBySql(sqlbf1.toString(), param);
        Long approverId = (long) 1;
        if(userMap != null){
            approverId = (Long) userMap.get("PK_USER");
        }
//        if(userMap == null){
//            return ApiResponseResult.failure("批准人不存在！");
//        }

        //2.添加风险管理记录表
        RiskLevelRecord riskLevelRecord = new RiskLevelRecord();
        riskLevelRecord.setBsSuppId(id);     //供应商ID
        riskLevelRecord.setBsType(BasicEnumConstants.TODO_SUPP_RISK);     //类型（12）
        riskLevelRecord.setBsOriginalRiskLevel(supplierInfo.getBsRiskLevel());     //原风险等级
        riskLevelRecord.setBsNewRiskLevel(bsRiskLevelUser);     //新风险等级
        riskLevelRecord.setBsApproverId(approverId);   //批准人
        riskLevelRecord.setBsApplicantId(SessionContextUtils.getCurrentUser().getId());    //申请人
        riskLevelRecord.setBsAdvice(bsRiskDescUser);     //申请人意见
        riskLevelRecord.setBsResult(0);   //结果，0代表未完成
        riskLevelRecord.setBsCreatedTime(new Date());
        riskLevelRecordDao.save(riskLevelRecord);

        //3.添加待办事项
        TodoInfo todoInfo = new TodoInfo();
        todoInfo.setBsUserId(approverId);
        todoInfo.setBsReferId(id);   //关联ID（存放供应商ID）
        todoInfo.setBsExtend(riskLevelRecord.getId());   //扩展（存放风险管理记录ID）
        todoInfo.setBsRouter("/qms/supplier/riskManagement");
        //设置待办事项标题
        SysUser user = sysUserDao.findOne(SessionContextUtils.getCurrentUser().getId());
        String userName = user.getBsName();
        String title = "[风险等级变更申请]" + userName + "申请将" + supplierInfo.getBsSuppChieseName() + "风险等级变更为" + bsRiskLevelUser + "级";
        todoInfo.setBsTitle(title);
        todoInfo.setBsStatus(BasicEnumConstants.TODO_NOFINISH);
        todoInfo.setBsContent(bsRiskDescUser);
        todoInfo.setBsSystemType(BasicStateEnum.TODO_QMSTYPE.intValue());
        todoInfo.setBsType(BasicEnumConstants.TODO_SUPP_RISK);
        todoInfo.setBsCreatedTime(new Date());   //创建时间
        todoInfo.setPkCreatedBy(SessionContextUtils.getCurrentUser().getId());
        todoInfo.setBsStartTime(new Date());     //有效起始时间
        //计算一周后的时间
        Calendar curr = Calendar.getInstance();
        curr.setTime(todoInfo.getBsStartTime());
        curr.add(Calendar.WEEK_OF_YEAR, 1);
        Date after7Days=curr.getTime();
        todoInfo.setBsEndTime(after7Days);                  //有效结束时间
        todoInfoDao.save(todoInfo);
        return ApiResponseResult.success("手动调整风险等级申请成功！").data(todoInfo);
    }

    /**
     * 完成变更风险等级（关闭待办事项）
     * @param id
     * @param bsRecordId
     * @param bsRiskLevelUser
     * @param bsApprovedAdvice
     * @param bsResult
     * @return
     * @throws BusinessException
     */
    @Transactional
    public ApiResponseResult completeRiskLevel(Long id, Long bsRecordId, Integer bsRiskLevelUser, String bsApprovedAdvice, Integer bsResult) throws BusinessException {
        SupplierInfo supplierInfo = supplierInfoDao.findOne(id);
        if(null == supplierInfo){
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
        if(supplierInfo.getId() <= 0){
            return ApiResponseResult.failure("没有操作权限");
        }
        //获取待办事项信息
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BooleanStateEnum.FALSE.intValue()));
        filters.add(new SearchFilter("bsStatus", SearchFilter.Operator.EQ, "0"));
        filters.add(new SearchFilter("bsReferId", SearchFilter.Operator.EQ, id));
        filters.add(new SearchFilter("bsType", SearchFilter.Operator.EQ, BasicEnumConstants.TODO_SUPP_RISK));
        Specifications<TodoInfo> spec = Specifications.where(super.and(filters, TodoInfo.class));
        Sort sort = new Sort(Sort.Direction.DESC,"id");
        List<TodoInfo> todoInfoList = todoInfoDao.findAll(spec, sort);
        //判断是否存在需要批准的待办事项
        if(todoInfoList.size() <= 0){
            return ApiResponseResult.failure("没有需要批准的待办事项");
        }

        //1.修改风险管理记录
        RiskLevelRecord riskLevelRecord = riskLevelRecordDao.findOne(bsRecordId);
        if(riskLevelRecord != null) {
            riskLevelRecord.setBsApprovedAdvice(bsApprovedAdvice);
            riskLevelRecord.setBsResult(bsResult);
            riskLevelRecord.setBsModifiedTime(new Date());
            riskLevelRecordDao.save(riskLevelRecord);

            //2.修改供应商信息表的风险等级（申请通过时修改，其他情况不修改）
            if(bsResult == 1){
                supplierInfo.setBsRiskLevelUser(bsRiskLevelUser);
                supplierInfo.setBsRiskDescUser(riskLevelRecord.getBsAdvice());
                supplierInfo.setBsRiskTimeUser(new Date());
                supplierInfo.setBsRiskLevel(bsRiskLevelUser);
                supplierInfo.setBsRiskManual(BooleanStateEnum.TRUE.intValue());
                supplierInfo.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
                supplierInfo.setBsModifiedTime(new Date());
                supplierInfoDao.save(supplierInfo);
            }
        }

        //3.关闭代办事项
        todoInfoDao.closeByBsReferIdAndBsType(id, BasicEnumConstants.TODO_SUPP_RISK);

        return ApiResponseResult.success("手动调整风险等级成功！").data(supplierInfo);
    }

    /**
     * 切换风险管理模式
     * @param id
     * @return
     */
    @Transactional
    public ApiResponseResult autoRiskLevel(Long id, Integer bsRiskManual) throws BusinessException {
        SupplierInfo supplierInfo = supplierInfoDao.findOne(id);
        if(null == supplierInfo){
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }
        if(supplierInfo.getId() <= 0){
            return ApiResponseResult.failure("没有操作权限");
        }
        //切换风险管理模式
        //如果是手动，则改为自动
        if(bsRiskManual == BooleanStateEnum.TRUE.intValue()){
            supplierInfo.setBsRiskLevel(supplierInfo.getBsRiskLevelSys());
            supplierInfo.setBsRiskManual(BooleanStateEnum.FALSE.intValue());
            supplierInfo.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
            supplierInfo.setBsModifiedTime(new Date());
        }
        //如果是自动，改为手动
        if(bsRiskManual == BooleanStateEnum.FALSE.intValue()){
            supplierInfo.setBsRiskManual(BooleanStateEnum.TRUE.intValue());
            supplierInfo.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
            supplierInfo.setBsModifiedTime(new Date());
        }
        supplierInfoDao.save(supplierInfo);
        return ApiResponseResult.success("切换调整风险等级模式成功！").data(supplierInfo);
    }

    @Transactional(readOnly = true)
    public ApiResponseResult getSrmApprovedSupp(String schInfo, String approvedLevel, Pageable pageRequest) throws BusinessException {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("schInfo", schInfo);
        StringBuffer sqlbf1 = new StringBuffer();
//        sqlbf1.append(" SELECT a.*,to_char(b.bs_created_time,'yyyy-MM-dd') checktime,case b.bs_priority when 1 then '待初评' when 2 then '辅导中' when 3 then '待初评' end status,");
//        sqlbf1.append(" case b.bs_priority when 1 then '暂无' when 3 then '是' end iscoach,");
//        sqlbf1.append(" case a.bs_supp_grade when '1' then '注册' when '2' then '潜在' when '3' then '暂准' when '6' then '特批' end grade FROM t_supplier_info a");
//        sqlbf1.append(" LEFT JOIN t_approved_items_record b ON b.bs_supp_id = a.id LEFT JOIN t_approved_items c ON c.id = b.bs_items_id");
//        sqlbf1.append(" WHERE c.bs_type = '22' and b.bs_status = '1'");
//        if(approvedLevel.equals("review")){
//            sqlbf1.append(" and b.bs_priority in (1,3)");
//        }else if(approvedLevel.equals("coach")){
//            sqlbf1.append(" and b.bs_priority = 2");
//        }else{}
        sqlbf1.append(" SELECT aa.*,case when aa.flow_count>1 then '辅导中' else '待初评' end status FROM (");
        sqlbf1.append(" SELECT a.*,to_char(b.bs_created_time,'yyyy-MM-dd') checktime,(select count(1) from "+ ApprovedFlowRecord.TABLE_NAME+" t where t.bs_supp_id = a.id) flow_count,");
        sqlbf1.append(" case a.bs_supp_grade when '1' then '注册' when '2' then '潜在' when '3' then '暂准' when '6' then '特批' end grade");
        sqlbf1.append(" FROM "+SupplierInfo.TABLE_NAME+" a");
        sqlbf1.append(" LEFT JOIN "+ ApprovedFlowRecord.TABLE_NAME+" b on b.bs_supp_id = a.id");
        sqlbf1.append(" LEFT JOIN "+ ApprovedFlow.TABLE_NAME+" c on c.id = b.bs_flow_id");
        sqlbf1.append(" WHERE c.bs_type = '22' and b.bs_status = '0') aa where 1=1");

        if(approvedLevel.equals("review")){
            sqlbf1.append(" and aa.flow_count=1");
        }else if(approvedLevel.equals("coach")){
            sqlbf1.append(" and aa.flow_count>1");
        }else{}

        sqlbf1.append(" and concat(concat(concat(concat(aa.bs_login_name,aa.bs_supp_chiese_name),aa.bs_supp_contact_name),aa.bs_supp_mobile),aa.bs_supp_address) like '%'||:schInfo||'%'");
        List<Map<String, Object>> list = super.findBySql(sqlbf1.toString(), pageRequest, param);
        List<Map<String, Object>> listAll = super.findBySql(sqlbf1.toString(), param);
        return ApiResponseResult.success().data(list).count(listAll.size());
    }

    @Transactional(readOnly = true)
    public ApiResponseResult getSrmApprovedFile(String suppcode) throws BusinessException {
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("suppcode", suppcode);
        StringBuffer sqlbf1 = new StringBuffer();
        sqlbf1.append(" SELECT a.*,to_char(a.bs_created_time,'yyyy-MM-dd') uploadtime FROM fs_file a");
        sqlbf1.append(" LEFT JOIN t_approved_items_record_file b on b.fs_file_id = a.id");
        sqlbf1.append(" LEFT JOIN t_approved_items_record c on c.id = b.bs_items_record_id");
        sqlbf1.append(" LEFT JOIN t_approved_items d on d.id = c.bs_items_id");
        sqlbf1.append(" LEFT JOIN t_supplier_info e on e.id = c.bs_supp_id");
        sqlbf1.append(" WHERE d.bs_type = '22' and e.bs_supp_code = :suppcode");
//        if(approvedLevel.equals("review")){
//            sqlbf1.append(" and c.bs_priority in (1,3)");
//        }else if(approvedLevel.equals("coach")){
//            sqlbf1.append(" and c.bs_priority = 2");
//        }else{}
        sqlbf1.append(" order by a.id asc");
        List<Map<String, Object>> list = super.findBySql(sqlbf1.toString(), param);
        return ApiResponseResult.success().data(list);
    }

    /**修改供应商等级和状态
     * @param bsSuppId
     * @param bsResult
     * @param bsGrade
     * @return
     * @throws BusinessException
     */
    @Transactional
    public ApiResponseResult changeSuppGradeAndStatus(Long bsSuppId, int bsResult, int bsGrade) throws BusinessException {
        String grade = "";
        String status = "";
        if(bsResult == ApprovedStateEnum.ITEMS_RESULT_PASS.intValue()){//通过，3：暂准，7：暂准供应商已批准
            if(bsGrade == 3){
                grade = "3";
                status = "7";
            }else{
                return ApiResponseResult.failure().data("初评报告的供应商结果为暂准等级才可通过！");
            }
        }else if(bsResult == ApprovedStateEnum.ITEMS_RESULT_NOPASS.intValue()){//不通过，5：禁用，等级不变；2：潜在，5：辅导中
			if(bsGrade == 2){
				grade = "2";
				status = "5";
			}else if(bsGrade == 5){
				grade = "5";
			}else{
				return ApiResponseResult.failure().data("初评报告的供应商结果有误！");
			}
        }else{
			return ApiResponseResult.failure().data("审批结果有误！");
		}
		SupplierInfo supplierInfo = supplierInfoDao.findOne(bsSuppId);
        if(!status.equals("")){
            supplierInfoDao.updateBsStatusAndBsGradeByLoginName(supplierInfo.getBsLoginName(),status,grade);
        }else{
            supplierInfoDao.updateBsGradeByLoginName(supplierInfo.getBsLoginName(),grade);
        }

        List<NameValuePair> formparams = new ArrayList<NameValuePair>();
        formparams.add(new BasicNameValuePair("login_name",supplierInfo.getBsLoginName()));
        formparams.add(new BasicNameValuePair("grade",grade));
        formparams.add(new BasicNameValuePair("status",status));

        String srmAddress = appConfig.getString("srm.address");

        ApiResponseResult result = httpClientService.postForm(srmAddress+"/UnindSRM/suppliermanage/suppbasemaneger!changeSuppByQms.action",formparams);
        return ApiResponseResult.success();
    }
}
