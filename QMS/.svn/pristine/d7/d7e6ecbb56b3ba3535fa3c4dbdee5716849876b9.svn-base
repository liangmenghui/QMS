<template>
    <div>
        <Row>
            <i-col>
                <Form class="query_area" ref="formQuery" :model="formQuery" inline>
                    <Form-item prop="bsCode">
                        <Input type="text" v-model="formQuery.bsCode" placeholder="文件编码" />
                    </Form-item>
                    <Form-item prop="bsName">
                        <Input type="text" v-model="formQuery.bsName" placeholder="文件名称" />
                    </Form-item>
                    <Form-item>
                        <Button type="primary" @click="handleSubmit('formQuery')">查 询</Button>
                    </Form-item>
                    <Form-item>
                        <Button type="primary" @click="showAddDialog()">新 增</Button>
                    </Form-item>
                </Form>
            </i-col>
        </Row>
        <Row>
            <i-col span="4">
                <Tree ref="tree" :data="tree.data" class="layout-menu-left" @on-select-change="selectNode" ></Tree>
            </i-col>
            <i-col span="20">
                <Table :data="datagrid.data.rows" :columns="datagrid.columns" stripe style="height:500px;"></Table>
                <div style="margin: 10px;overflow: hidden">
                    <div style="float: right;">
                        <Page :total="datagrid.data.total" :current="1" :page-size="datagrid.queryParams.rows" :page-size-opts="datagrid.pagination" @on-change="changePage" show-total show-elevator show-sizer></Page>
                    </div>
                </div>
            </i-col>
        </Row>
        <Modal v-model="dialog.modal_dialog" title="" @on-ok="ok" @on-cancel="cancel" >
            <p>
                <Form :model="dialog.formItem" :rules="dialog.ruleForm" :label-width="80" enctype="multipart/form-data" >
                    <Input v-model="dialog.formItem.id" type="hidden"></Input>
                    <!--<Input v-model="dialog.formItem.pkGroup" value="-1"  type="hidden"></Input>
                    <Input v-model="dialog.formItem.pkOrg" value="-1"  type="hidden"></Input>-->
                    <Input v-model="dialog.formItem.pkFsCatalog" value="-1"  type="hidden"></Input>
                    
                    <Form-item label="集团" prop="pkGroup">
                        <Select v-model="dialog.formItem.pkGroup" @on-change="getOrgList" placeholder="请输入">
                            <Option v-for="item in groups" :value="item.id" :key="item.bsCode">{{ item.bsName }}</Option>
                        </Select>
                    </Form-item>
                    <Form-item label="组织" prop="pkOrg">
                        <Select v-model="dialog.formItem.pkOrg" placeholder="请输入">
                            <Option value="1" >全局</Option>
                            <Option v-for="item in orgs" :value="item.id" :key="item.bsCode">{{ item.bsName }}</Option>
                        </Select>
                    </Form-item>
                    <!--<Form-item label="所属目录">
                        <Select v-model="dialog.formItem.pkFsCatalog" placeholder="请选择">
                            <Option value="beijing">北京市</Option>
                        </Select>
                    </Form-item>-->
                    <Form-item label="上级节点">
                        <Input v-model="dialog.formItem.parentName" disabled placeholder="请输入"></Input>
                    </Form-item>
                    <Form-item label="文件编码" prop="bsCode">
                        <Input v-model="dialog.formItem.bsCode" placeholder="请输入"></Input>
                    </Form-item>
                    <Form-item label="文件名称" prop="bsName">
                        <Input v-model="dialog.formItem.bsName" placeholder="请输入"></Input>
                    </Form-item>
                    <Form-item label="文件">
                        <Upload multiple type="drag" :before-upload="handleUpload" >
                            <div style="padding: 20px 0" v-if="this.file !== null">Upload file: {{ this.file.name }} </div>
                            <div style="padding: 20px 0" v-if="this.file === null">
                                <Icon type="ios-cloud-upload" size="52" style="color: #3399ff"></Icon>
                                <p>Click or drag files here to upload</p>
                            </div>
                        </Upload>
                    </Form-item>
                   
                    <Form-item label="备注">
                        <Input v-model="dialog.formItem.bsComment" type="textarea" :autosize="{minRows: 2,maxRows: 5}" placeholder="请输入..."></Input>
                    </Form-item>
                </Form>
            </p>
        </Modal>
    </div>
</template>
<script>
export default {
    data() {
        return {
            file: {},
            formQuery: {
                bsCode: '',
                bsName: ''
            },
            tree: {
                data: [{expand: true, title: '根目录', children:[]}]
            },
            dialog: {
                modal_dialog: false,
                formItem: {
                },
                ruleForm: {
                    bsCode: [
                        { required: true, message: '请填写编码', trigger: 'blur' }
                    ],
                    bsName: [
                        { required: true, message: '请填写名称', trigger: 'blur' }
                    ],
                    bsLeaf: [
                        { required: true, message: '请选择目录类型', trigger: 'blur' }
                    ]
                }
            },
            datagrid: {
                queryParams:{
                    page:1,
                    rows:25,
                    pkFsCatalog:-1
                },
                pagination: [25, 50, 100],
                data: {rows:[],total:0},
                columns: [
                    {
                        title: '所属目录',
                        key: 'pkFsCatalog',
                        width: '100px',
                        render: (h, params) => {
                            return h('span', params.row.catalog?params.row.catalog.bsName:'Unknown')
                        }
                    },
                    {
                        title: '文件编码',
                        key: 'bsCode',
                        width: '100px'
                    },
                    {
                        title: '文件名称',
                        key: 'bsName',
                        width: '150px'
                    },
                    {
                        title: '文件路径',
                        key: 'bsFilePath',
                        width: '225px',
                        render: (h, params) => {
                            return h('a', params.row.bsFilePath + '/' + params.row.bsName)
                        }
                    },
                    {
                        title: '创建时间',
                        key: 'bsCreatedTime',
                        width: '150px'
                    },
                    {
                        title: '更新时间',
                        key: 'bsModifiedTime',
                        width: '150px'
                    },
                    {
                        title: '操作',
                        key: 'action',
                        render: (h, params) => {
                            let buttons = [];
                            buttons.push(h('Button', {
                                props: {
                                    type: 'primary',
                                    size: 'small'
                                },
                                style: {
                                    marginRight: '5px'
                                },
                                on: {
                                    click: () => {
                                        this.showEditDialog(params)
                                    }
                                }
                            }, '编辑'));
                            buttons.push(h('Button', {
                                props: {
                                    type: 'error',
                                    size: 'small'
                                },
                                on: {
                                    click: () => {
                                        this.delete(params)
                                    }
                                }
                            }, '删除'));
                            buttons.push(h('Button', {
                                props: {
                                    type: 'primary',
                                    size: 'small'
                                },
                                on: {
                                    click: () => {
                                        this.download(params);
                                    }
                                }
                            }, '下载'))
                            return h('div', buttons);
                        }
                    }
                ]
            }
        }
    },
    created(){
        this.getTree();
        this.getGroupList();
    },
    methods: {
        getGroupList() {
            this.api.group.getlist({}).then((res) => {
                console.log("get list===>");
                console.log(res.data);
                if(res.result) {
                    this.groups = res.data.rows;
                }else {
                    this.$Message.error(res.msg);
                }
            });
        },
        getOrgList(pkGroup) {
            this.api.org.getlist({pkGroup:pkGroup}).then((res) => {
                console.log("get list===>");
                console.log(res.data);
                if(res.result) {
                    this.orgs = res.data.rows;
                }else {
                    this.$Message.error(res.msg);
                }
            });
        },
        handleUpload (file) {
            this.file = file;
            //alert(this.dialog.formItem.file.name);
            return false;
        },
        handleSubmit(name) {
            this.getData();
        },
        getData() {
            Object.assign(this.formQuery, this.datagrid.queryParams);
            console.log("after===>");
            console.log(this.formQuery);
            this.api.fsfile.getlist(this.formQuery).then((res) => {
                console.log("get list===>");
                console.log(res.data);
                if(res.result) {
                    this.datagrid.data = res.data;
                }else {
                    this.$Message.error(res.msg);
                }
            });
        },
        reloadData() {
            this.datagrid.data = this.getData();
        },
        changePage (page) {
            this.datagrid.queryParams.page = page;
            this.datagrid.data = this.getData();
        },
        edit(params) {
            console.log(params);
            this.api.fscatalog.edit(params.row).then((res)=>{
                console.log(res)
                if(res.result) {
                    //refresh
                    this.reloadData();
                }else {
                    this.$Message.error(res.msg);
                }
            });
        },
        delete(params) {
            console.log(params);
            this.$Modal.confirm({
                title: '提示信息',
                content: '<p>是否确定删除？</p>',
                loading: true,
                onOk: () => {
                    this.api.fsfile.delete({id:params.row.id}).then((res)=>{
                        console.log(res)
                        if(res.result) {
                            //refresh
                            this.getTree();
                            this.reloadData();
                            this.$Message.info('删除成功');
                            this.$Modal.remove();
                        }else {
                            this.$Message.error(res.msg);
                        }
                    });
                }
            });
        },
        download(params) {
            windows.open('/fs/file/getattch?fileId=' + params.row.id)
        },
        showAddDialog() {
            this.dialog.modal_dialog = true;

            let node = this.$refs["tree"].getSelectedNodes();
            if(node.length==0) {
                this.dialog.formItem = {pkFsCatalog: -1, parentName: "根目录"};
            }else {
                this.dialog.formItem = {pkFsCatalog: node[0].id, parentName: node[0].title};
            }
            // let configs = Object.assign({okText: "保存", cancelText:"取消", width: "500px"}, config);
            // this.$Modal.confirm(configs);
        },
        showEditDialog(params) {
            this.dialog.modal_dialog = true;
            let r = params.row;
            this.file = null;
            this.dialog.formItem = {pkFsCatalog:r.pkFsCatalog, pkGroup:r.pkGroup, pkOrg:r.pkOrg, id:r.id,bsCode:r.bsCode, bsName:r.bsName, bsRevision:r.bsRevision, bsContentType:r.bsContentType, bsFileType:r.bsFileType, bsFileName:r.bsFileName, bsFileSize:r.bsFileSize, bsFilePath:r.bsFilePath, bsIsCurrentVersion:r.bsIsCurrentVersion, bsIsValid:r.bsIsValid, bsVerifyState:r.bsVerifyState};

            let node = this.$refs["tree"].getSelectedNodes();
            if(node.length==0) {    
                Object.assign(this.dialog.formItem, {pkFsCatalog: -1, parentName: "根目录"});
            }else {
                Object.assign(this.dialog.formItem, {pkFsCatalog: node[0].id, parentName: node[0].title});
            }
            // let configs = Object.assign({okText: "保存", cancelText:"取消", width: "500px"}, config);
            // this.$Modal.confirm(configs);
        },
        ok () {
            console.log("this.dialog.formItem====>"+typeof(this.dialog.formItem.id));
            if(typeof(this.dialog.formItem.id)!=undefined && typeof(this.dialog.formItem.id)=="number") {
                console.log("编辑1");
                let formData = new FormData();
                formData.append('file', this.file);
                formData.append("id", this.dialog.formItem.id);
                formData.append("pkFsCatalog", this.dialog.formItem.pkFsCatalog);
                formData.append("pkGroup", this.dialog.formItem.pkGroup);
                formData.append("pkOrg", this.dialog.formItem.pkOrg);
                formData.append("bsCode", this.dialog.formItem.bsCode);
                formData.append("bsName", this.dialog.formItem.bsName);
                formData.append("bsComment", this.dialog.formItem.bsComment);
                // this.$refs["dialog.ruleForm"].validate((valid) => {
                //     if (valid) {
                        this.api.fsfile.edit(formData).then((res) => {
                            if(res.result) {
                                //refresh
                                this.reloadData();
                            }else {
                                this.$Message.error(res.msg);
                            }
                        });
                //     }
                // })
            }else {
                console.log("新增1");
                let formData = new FormData();
                formData.append('file', this.file);
                formData.append("pkFsCatalog", this.dialog.formItem.pkFsCatalog);
                formData.append("pkGroup", this.dialog.formItem.pkGroup);
                formData.append("pkOrg", this.dialog.formItem.pkOrg);
                formData.append("bsCode", this.dialog.formItem.bsCode);
                formData.append("bsName", this.dialog.formItem.bsName);
                formData.append("bsComment", this.dialog.formItem.bsComment);
                // this.$refs["dialog.ruleForm"].validate((valid) => {
                //     if (valid) {
                        this.api.fsfile.add(formData).then((res) => {
                            if(res.result) {
                                //refresh
                                this.reloadData();
                            }else {
                                this.$Message.error(res.msg);
                            }
                        });
                //     }
                // });
            }
        },
        cancel () {
            
        },
        getTree() {
            this.api.fscatalog.gettree({}).then((res) => {
                let data = [{id:-1, expand: true, title: '根目录', children: []}];
                if(res.result) {
                    console.log(this.tree.data);
                    data[0].children = res.data;
                    this.tree.data = data;
                }
            });
        },
        selectNode(node) {
            console.log("selected");
            this.datagrid.queryParams.pkFsCatalog = node[0].id;
            this.datagrid.data = this.getData();
        },
        getSelectedNodes() {
            this.dialog.formItem.pkFsCatalog = node[0].id
            console.log(JSON.stringify(this.dialog.formItem));
        }
    }
}
</script>
