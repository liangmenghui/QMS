<template>
    <div class="component">
        <center>
            <el-button type="primary" style="padding: 7px 20px;" @click="saveRecord(0)">
                <i class="el-icon-news"></i>&nbsp;&nbsp;{{$t('Button.SaveChanges')}}
            </el-button>            
            <el-button v-if="approvedItemRecord.bsStatus>0&&approvedItemRecord.bsStep>1" type="warning" style="padding: 7px 20px;margin-left: 3%;" @click="showModel(2)">
                <i class="el-icon-warning"></i>&nbsp;&nbsp;{{$t('Button.DismissReview')}}
            </el-button>         
            <el-button  v-if="approvedItemRecord.bsStatus>0" type="danger" style="padding: 7px 20px;margin-left: 3%;" @click="showModel(3)">
                <i class="el-icon-close"></i>&nbsp;&nbsp;{{$t('Button.AuditFailed')}}
            </el-button>
            <el-button  v-if="approvedItemRecord.bsStatus>0" type="success" style="padding: 7px 20px;margin-left: 3%;" @click="showModel(1)">
                <i class="el-icon-check"></i>&nbsp;&nbsp;{{$t('Button.Approved')}}
            </el-button>
            <!-- <input type="file" @change="importFile(this)" id="imFile" style="display: none"
                accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel"/>
            <a id="downlink"></a>
            <el-button  v-if="approvedItemRecord.bsStatus>0" type="success" style="padding: 7px 20px;margin-left: 3%;" @click="downloadFile(excelData)">
                <i class="el-icon-download"></i>&nbsp;&nbsp;导出文件
            </el-button> -->
            <Modal v-model="showFailedModel"  @on-ok="saveRecord(3)">
                <el-form label-width="80">
                    <p style="font-size: 16px;color: #F56C6C;">确认当前审核失败？</p>
                    <el-form-item label="结果说明" v-if="flowDesc!=undefined&&flowDesc.length>0">
                        <el-input v-model="flowDesc" type="textarea"></el-input>
                    </el-form-item>         
                    <el-form-item label="审核意见" prop="" >
                        <el-input v-model="resultDesc" type="textarea"></el-input>
                    </el-form-item>                                    
                </el-form>
            </Modal>
            <Modal v-model="showSuccessModel"  @on-ok="saveRecord(1)">
                <el-form label-width="80">
                    <p style="font-size: 16px;color: #67C23A;">确认当前审核通过？</p>
                    <el-form-item label="结果说明" prop="" >
                        <el-input v-model="flowDesc" type="textarea"></el-input>
                    </el-form-item>         
                    <el-form-item label="审核意见" prop="" >
                        <el-input v-model="resultDesc" type="textarea"></el-input>
                    </el-form-item>                                  
                </el-form>
            </Modal>
            <Modal v-model="showRejectModel"  @on-ok="saveRecord(2)">
                <el-form label-width="80">
                    <p style="font-size: 16px;color: #67C23A;">驳回当前审核？</p>
                    <el-form-item label="结果说明" prop="" >
                        <el-input v-model="flowDesc" type="textarea"></el-input>
                    </el-form-item>         
                    <el-form-item label="审核意见" prop="" >
                        <el-input v-model="resultDesc" type="textarea"></el-input>
                    </el-form-item>                                    
                </el-form>
            </Modal>
        </center>
    </div>
</template>

<script>
// var XLSX = require('xlsx')  //引入xlsx
export default {
    props:['approvedItemRecord','type','data','sampleRegularRecords'], //type: audits:条款审核 inspect:出货检验报告 quality:质量检验报告
    data() {
        return {
            showFailedModel:false,
            showSuccessModel:false,
            showRejectModel: false,
            isCoach: 1,
            resultDesc: "",
            flowDesc: "",
            // fullscreenLoading: false, // 加载中
            // imFile: '', // 导入文件el
            // outFile: '',  // 导出文件el
            // errorDialog: false, // 错误信息弹窗
            // errorMsg: '', // 错误信息内容
            // excelData: [  // 测试数据
            // {name: '红烧鱼', size: '大', taste: '微辣', price: '40', remain: '100'}
            // ],
        }
    },
    created(){
    },
    mounted () {
        // this.imFile = document.getElementById('imFile')
        // this.outFile = document.getElementById('downlink')
    },
    methods: {    
        showModel(result){
            if(result == 3) this.showFailedModel = true;
            else if(result == 2) this.showRejectModel = true;
            else this.showSuccessModel = true;
        },
        approved(result) {
            if(result != 0) {
                var params = {
                    bsItemsId: this.approvedItemRecord.itemsBy.id,
                    bsItemsRecordId: this.approvedItemRecord.id,
                    bsResult: result,
                    itemsDesc : this.flowDesc,
                    resultDesc : this.resultDesc
                };
                this.api.Audit.approved(params).then((res) => {
                    this.$Message.info("提交审核结果完成");
                    this.bsStatus = result;
                    var path = this.$route.matched[this.$route.matched.length-2].path;
                    var route = {path:path,query:{bsFlowRecordId:this.$route.query.bsFlowRecordId,refresh:true}};
                    this.$router.replace(route);
                });
            }
        },
        saveRecord(result){
            if(this.type == 'audits') {
                var list = new Array();
                var rows = this.data;
                for (var i = 0;  i < rows.length; i++) {
                    var data = {};
                    data.bsItemsRecoreId = this.approvedItemRecord.id;
                    data.bsTermsId = rows[i].ID,
                    data.bsScore = rows[i].BS_SCORE;
                    data.bsDesc = rows[i].BS_DESC;
                    if(rows[i].SCORE_ID != undefined) data.id = rows[i].SCORE_ID;
                    list.push(data);
                }
                var approvedTermsScoreList = JSON.stringify(list);
                this.api.Audit.records({approvedTermsScoreStr:JSON.stringify(list)}).then((res) => {
                    this.$emit('updateTermsRecord');
                    this.$Message.info("保存成功");
                    this.approved(result);
                });
            }
            else if(this.type == 'inspect') {
                var params = Object.assign({},this.data);
                params = this.$Util.formattedParams(params);
                this.api.shipmentInspect.edit(params).then((res) => {
                    this.$Message.info("保存成功");
                    this.approved(result);
                });
                
                if(this.sampleRegularRecords!=undefined){
                    var params = {bsShipmentInspectId:params.id};
                    var records = [];
                    for (var i = 0; i < this.sampleRegularRecords.length; i++) {
                        var regular = this.sampleRegularRecords[i];
                        for (var j = 0; j < regular.records.length ; j++) {
                            var record = regular.records[j];
                            records.push(this.$Util.formattedParams(record));
                        }
                    }
                    params.sampleRegularRecordStr = JSON.stringify(records);
                    this.api.sampleRegularRecord.add(params).then((res) => {
                        this.$emit('saved');
                    });
                }
            }
            else if(this.type == 'quality') {
                var params = Object.assign({},this.data);
                params = this.$Util.formattedParams(params);
                this.api.qualityInspect.edit(params).then((res) => {
                    this.$Message.info("保存成功");
                    this.approved(result);
                });
            }
            else {
                this.approved(result);
            }
        },
        // downloadFile: function (rs) { // 点击导出按钮
        //     let data = [{}]
        //     for (let k in rs[0]) {
        //         data[0][k] = k
        //     }
        //     data = data.concat(rs)
        //     this.downloadExl(data, '菜单')
        // },
        // importFile: function () { // 导入excel
        //     this.fullscreenLoading = true
        //     let obj = this.imFile
        //     if (!obj.files) {
        //         this.fullscreenLoading = false
        //         return
        //     }
        //     var f = obj.files[0]
        //     var reader = new FileReader()
        //     let $t = this
        //     reader.onload = function (e) {
        //         var data = e.target.result
        //         if ($t.rABS) {
        //         $t.wb = XLSX.read(btoa(this.fixdata(data)), {  // 手动转化
        //             type: 'base64'
        //         })
        //         } else {
        //             $t.wb = XLSX.read(data, {
        //             type: 'binary'
        //             })
        //         }
        //     let json = XLSX.utils.sheet_to_json($t.wb.Sheets[$t.wb.SheetNames[0]])
        //     console.log(typeof json)
        //     $t.dealFile($t.analyzeData(json)) // analyzeData: 解析导入数据
        //     }
        //     if (this.rABS) {
        //         reader.readAsArrayBuffer(f)
        //     } else {
        //         reader.readAsBinaryString(f)
        //     }
        // },
        // downloadExl: function (json, downName, type) {  // 导出到excel
        //     let keyMap = [] // 获取键
        //     for (let k in json[0]) {
        //         keyMap.push(k)
        //     }
        //     console.info('keyMap', keyMap, json)
        //     let tmpdata = [] // 用来保存转换好的json
        //     json.map((v, i) => keyMap.map((k, j) => Object.assign({}, {
        //         v: v[k],
        //     position: (j > 25 ? this.getCharCol(j) : String.fromCharCode(65 + j)) + (i + 1)
        //     }))).reduce((prev, next) => prev.concat(next)).forEach(function (v) {
        //         tmpdata[v.position] = {
        //             v: v.v
        //         }
        //     })
        //     let outputPos = Object.keys(tmpdata)  // 设置区域,比如表格从A1到D10
        //     let tmpWB = {
        //         SheetNames: ['mySheet'], // 保存的表标题
        //         Sheets: {
        //             'mySheet': Object.assign({},
        //             tmpdata, // 内容
        //             {
        //             '!ref': outputPos[0] + ':' + outputPos[outputPos.length - 1] // 设置填充区域
        //             })
        //         }
        //     }
        //     let tmpDown = new Blob([this.s2ab(XLSX.write(tmpWB,
        //         {bookType: (type === undefined ? 'xlsx' : type), bookSST: false, type: 'binary'} // 这里的数据是用来定义导出的格式类型
        //         ))], {
        //             type: ''
        //         })  // 创建二进制对象写入转换好的字节流
        //     var href = URL.createObjectURL(tmpDown)  // 创建对象超链接
        //     this.outFile.download = downName + '.xlsx'  // 下载名称
        //     this.outFile.href = href  // 绑定a标签
        //     this.outFile.click()  // 模拟点击实现下载
        //     setTimeout(function () {  // 延时释放
        //         URL.revokeObjectURL(tmpDown) // 用URL.revokeObjectURL()来释放这个object URL
        //     }, 100)
        // },
        // analyzeData: function (data) {  // 此处可以解析导入数据
        //     return data
        // },
        // dealFile: function (data) {   // 处理导入的数据
        //     console.log(data)
        //     this.imFile.value = ''
        //     this.fullscreenLoading = false
        //     if (data.length <= 0) {
        //         this.errorDialog = true
        //         this.errorMsg = '请导入正确信息'
        //     } else {
        //         this.excelData = data
        //     }
        // },
        // s2ab: function (s) { // 字符串转字符流
        //     var buf = new ArrayBuffer(s.length)
        //     var view = new Uint8Array(buf)
        //     for (var i = 0; i !== s.length; ++i) {
        //         view[i] = s.charCodeAt(i) & 0xFF
        //     }
        //     return buf
        // },
        // getCharCol: function (n) { // 将指定的自然数转换为26进制表示。映射关系：[0-25] -> [A-Z]。
        //     let s = ''
        //     let m = 0
        //     while (n > 0) {
        //     m = n % 26 + 1
        //     s = String.fromCharCode(m + 64) + s
        //     n = (n - m) / 26
        //     }
        //     return s
        // },
        // fixdata: function (data) {  // 文件流转BinaryString
        //     var o = ''
        //     var l = 0
        //     var w = 10240
        //     for (; l < data.byteLength / w; ++l) {
        //      o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)))
        //     }
        //     o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)))
        //     return o
        // }
    }
 } 
</script>