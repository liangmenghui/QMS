<template>
    <div>
        <Row>
            <i-col>
                <Form class="query_area" ref="formQuery" :model="formQuery" inline>
                    <Form-item prop="bsCode">
                        <Input v-model="formQuery.bsCode" placeholder="帐号" />
                    </Form-item>
                    <Form-item prop="bsName">
                        <Input v-model="formQuery.bsName" placeholder="姓名" />
                    </Form-item>
                    <Form-item v-if="menuData.perms.QUERY">
                        <Button type="primary" @click="handleSubmit('formQuery')">查 询</Button>
                    </Form-item>
                    <Form-item v-if="menuData.perms.ADD">
                        <Button type="primary" @click="showAddDialog()">新 增</Button>
                    </Form-item>
                </Form>
            </i-col>
        </Row>
        <Row>
            <i-col span="24">
                <Table :data="datagrid.data.rows" :columns="datagrid.columns" stripe height="500"></Table>
                <div style="margin: 10px;overflow: hidden">
                    <div style="float: right;">
                        <Page :total="datagrid.data.total" :current="1" :page-size="datagrid.queryParams.rows" :page-size-opts="datagrid.pagination" @on-change="changePage" show-total show-elevator show-sizer></Page>
                    </div>
                </div>
            </i-col>
        </Row>
        <Modal v-model="dialog.modal_dialog" title="" @on-ok="ok" @on-cancel="cancel" width="800">
            <p>
                <Form :model="dialog.formItem" :ref="dialog.ruleForm" :rules="dialog.ruleForm" :label-width="80">
                    <span style="display:none;">
                        <Input v-model="dialog.formItem.id"></Input>
                        <!--<Input v-model="dialog.formItem.pkGroup" value="-1"></Input>
                        <Input v-model="dialog.formItem.pkOrg" value="-1"></Input>-->
                    </span>
                <Row>
                    <i-col span="12">
                        <Form-item label="集团" prop="pkGroup">
                            <Select v-model="dialog.formItem.pkGroup" @on-change="getOrgList" placeholder="请输入">
                                <Option v-for="item in groups" :value="item.id" :key="item.bsCode">{{ item.bsName }}</Option>
                            </Select>
                        </Form-item>
                    </i-col>
                    <i-col span="12">
                        <Form-item label="组织" prop="pkOrg">
                            <Select v-model="dialog.formItem.pkOrg" placeholder="请输入">
                                <Option value="1" >全局</Option>
                                <Option v-for="item in orgs" :value="item.id" :key="item.bsCode">{{ item.bsName }}</Option>
                            </Select>
                        </Form-item>
                    </i-col>
                </Row>
                <Row>
                    <i-col span="12">
                        <Form-item label="帐号" prop="bsCode">
                            <Input v-model="dialog.formItem.bsCode" placeholder="请输入"></Input>
                        </Form-item>
                    </i-col>
                    <i-col span="12">
                        <Form-item label="姓名" prop="bsName">
                            <Input v-model="dialog.formItem.bsName" placeholder="请输入"></Input>
                        </Form-item>
                    </i-col>
                </Row>
                <Row>
                    <i-col span="12">
                        <Form-item label="手机号" prop="bsMobile">
                            <Input v-model="dialog.formItem.bsMobile" placeholder="请输入"></Input>
                        </Form-item>
                    </i-col>
                    <i-col span="12">
                        <Form-item label="邮箱地址" prop="bsEmail">
                            <Input v-model="dialog.formItem.bsEmail" placeholder="请输入"></Input>
                        </Form-item>
                    </i-col>
                </Row>
                <Row>
                    <i-col span="24">
                        <Form-item label="备注">
                            <Input v-model="dialog.formItem.bsComment" type="textarea" placeholder="请输入..."></Input>
                        </Form-item>
                    </i-col>
                </Row>
                </Form>
            </p>
        </Modal>
        <!--分配角色-->
        <Modal v-model="roles.modal_dialog" title="分配角色" @on-ok="save" @on-cancel="unsave">
            <input v-model="roles.formItem.pkUser" type="hidden" name="pkUser" value="" />
            <Row>
                <i-col span="10">
                    已分配角色
                </i-col>
                <i-col span="4">
                </i-col>
                <i-col span="10">
                    未分配角色
                </i-col>
            </Row>
            <Row>
                <i-col span="10">
                    <Tree ref="allocedtree" :data="roles.tree.alloced" class="layout-menu-left" style="height:500px;" ></Tree>
                </i-col>
                <i-col span="4">
                    <Button type="primary" @click="add()">添 加</Button>
                    <Button type="primary" @click="remove()">移 除</Button>
                </i-col>
                <i-col span="10">
                    <Tree ref="unallocedtree" :data="roles.tree.unalloced" class="layout-menu-left" style="height:500px;" ></Tree>
                </i-col>
            </Row>
        </Modal>
    </div>
</template>
<script>
import {mapState} from 'vuex'
import custDialog from '../../../components/business-component/custDialog.vue';
export default {
    components: {
        custDialog
    },
    data() {
        return {
            groups:[],
            orgs:[],
            formQuery: {
                bsCode: '',
                bsName: ''
            },
            roles: {
                modal_dialog: false,
                formItem: {
                },
                tree: {
                    alloced: [{expand: true, title: '根目录', children:[]}],
                    unalloced: [{expand: true, title: '根目录', children:[]}]
                }
            },
            dialog: {
                modal_dialog: false,
                formItem: {
                },
                ruleForm: {
                    bsCode: [
                        { required: true, message: '请填写帐号', trigger: 'blur' }
                    ],
                    bsName: [
                        { required: true, message: '请填写姓名', trigger: 'blur' }
                    ]
                }
            },
            datagrid: {
                queryParams:{
                    page:1,
                    rows:25,
                    bsIsDel: 0
                },
                pagination: [25, 50, 100],
                data: {rows:[],total:0},
                columns: [
                    {
                        title: '集团',
                        key: 'bsGroupName',
                        render: (h, params) => {
                            if(params.row.group) {
                                return h('span', params.row.group.bsName)
                            }
                        }
                    },
                    {
                        title: '组织',
                        key: 'bsOrgName',
                        render: (h, params) => {
                            if(params.row.org) {
                                return h('span', params.row.org.bsName)
                            }
                        }
                    },
                    {
                        title: '帐号',
                        key: 'bsCode'
                    },
                    {
                        title: '姓名',
                        key: 'bsName'
                    },
                    {
                        title: '手机号',
                        key: 'bsMobile'
                    },
                    {
                        title: '邮箱',
                        key: 'bsEmail'
                    },
                    {
                        title: '状态',
                        key: 'bsStatus',
                        render: (h, params) => {
                            let text;
                            if(params.row.bsStatus==1) {
                                text = "启用";
                            }else if(params.row.bsStatus==2) {
                                text = "停用";
                            }else if(params.row.bsStatus==3) {
                                text = "锁定";
                            }
                            return h('span', text)
                        }
                    },
                    {
                        title: '删除标识',
                        key: 'bsIsDel',
                        render: (h, params) => {
                            let text;
                            if(params.row.bsIsDel==0) {
                                text = "-";
                            }else if(params.row.bsIsDel==1) {
                                text = "已删除";
                            }
                            return h('span', text)
                        }
                    },
                    {
                        title: '创建时间',
                        key: 'bsCreatedTime'
                    },
                    {
                        title: '更新时间',
                        key: 'bsModifiedTime'
                    },
                    {
                        title: '操作',
                        key: 'action',
                        render: (h, params) => {
                            let ary = [];
                            if(this.menuData.perms.ALLOC) {
                                ary.push(h('Button', {
                                    props: {
                                        type: 'primary',
                                        size: 'small'
                                    },
                                    style: {
                                        marginRight: '5px'
                                    },
                                    on: {
                                        click: () => {
                                            this.showAllocDialog(params)
                                        }
                                    }
                                }, '分配角色'));
                            }
                            if(this.menuData.perms.EDIT) {
                                ary.push(h('Button', {
                                    props: {
                                        type: 'primary',
                                        size: 'small'
                                    },
                                    style: {
                                        marginRight: '5px'
                                    },
                                    on: {
                                        click: () => {
                                            this.showEditDialog(params)
                                        }
                                    }
                                }, '编辑'));
                            }
                            if(this.menuData.perms.DELETE) {
                                ary.push(h('Button', {
                                    props: {
                                        type: 'error',
                                        size: 'small'
                                    },
                                    style: {
                                        marginRight: '5px'
                                    },
                                    on: {
                                        click: () => {
                                            this.delete(params)
                                        }
                                    }
                                }, '删除'));
                            }
                            if(this.menuData.perms.RESET) {
                                ary.push(h('Button', {
                                    props: {
                                        type: 'primary',
                                        size: 'small'
                                    },
                                    style: {
                                        marginRight: '5px'
                                    },
                                    on: {
                                        click: () => {
                                            this.resetpassword(params)
                                        }
                                    }
                                }, '重置密码'));
                            }
                            if(this.menuData.perms.CUSTOMFIELD) {
                                ary.push(h(custDialog, {
                                    props:{
                                        type: 'primary',
                                        size: 'small',
                                        name: '客制化',
                                        ref:'custDialog',
                                        catelog: 'SysUserBo',
                                        rid: params.row.id
                                    },
                                    on: {
                                        click: () => {
                                            this.$refs.custDialog.showDialog();
                                        }
                                    }
                                }));
                            }
                            return h('div', ary);
                        }
                    }
                ]
            }
        }
    },
    created(){
        this.getGroupList();
    },
    computed:{
        ...mapState({
            menuData:state=>state.menuData  
        })
    },
    methods: {
        getGroupList() {
            this.api.admin.group.getlist({}).then((res) => {
                console.log("get list===>");
                console.log(res.data);
                if(res.result) {
                    this.groups = res.data.rows;
                }else {
                    this.$Message.error(res.msg);
                }
            });
        },
        getOrgList(pkGroup) {
            this.api.admin.organization.getlist({pkGroup:pkGroup}).then((res) => {
                console.log("get list===>");
                console.log(res.data);
                if(res.result) {
                    this.orgs = res.data.rows;
                }else {
                    this.$Message.error(res.msg);
                }
            });
        },
        handleSubmit(name) {
            this.getData();
        },
        getData() {
            Object.assign(this.formQuery, this.datagrid.queryParams);
            console.log("after===>");
            console.log(this.formQuery);
            this.api.admin.user.getlist(this.formQuery).then((res) => {
                console.log("get list===>");
                console.log(res.data);
                if(res.result) {
                    this.datagrid.data = res.data;
                }else {
                    this.$Message.error(res.msg);
                }
            });
        },
        reloadData() {
            this.datagrid.data = this.getData();
        },
        changePage (page) {
            this.datagrid.queryParams.page = page;
            this.datagrid.data = this.getData();
        },
        resetpassword(params) {
            this.api.admin.user.resetpassword({id:params.row.id}).then((res) => {
                console.log("get list===>");
                console.log(res.data);
                if(res.result) {
                    this.$Message.info(res.msg);
                }else {
                    this.$Message.error(res.msg);
                }
            });
        },
        edit(params) {
            console.log(params);
            this.api.admin.user.edit(params.row).then((res)=>{
                console.log(res)
                if(res.result) {
                    //refresh
                    this.reloadData();
                }else {
                    this.$Message.error(res.msg);
                }
            });
        },
        delete(params) {
            console.log(params);
            this.$Modal.confirm({
                title: '提示信息',
                content: '<p>是否确定删除？</p>',
                loading: true,
                onOk: () => {
                    this.api.admin.user.delete({id:params.row.id}).then((res)=>{
                        console.log(res)
                        if(res.result) {
                            //refresh
                            this.reloadData();
                            this.$Message.info('删除成功');
                            this.$Modal.remove();
                        }else {
                            this.$Message.error(res.msg);
                        }
                    });
                }
            });
        },
        showAddDialog() {
            this.dialog.modal_dialog = true;
            this.dialog.formItem = {};
        },
        showEditDialog(params) {
            this.dialog.modal_dialog = true;
            let r = params.row;
            this.dialog.formItem = {pkGroup:r.pkGroup, pkOrg:r.pkOrg, id:r.id,bsCode:r.bsCode, bsName:r.bsName, bsMobile:r.bsMobile, bsEmail:r.bsEmail, bsComment:r.bsComment};
        },
        ok() {
            console.log("this.dialog.formItem====>"+typeof(this.dialog.formItem.id));
            if(typeof(this.dialog.formItem.id)!=undefined && typeof(this.dialog.formItem.id)=="number") {
                console.log("编辑1");
                console.log(JSON.stringify(this.dialog.formItem));
                // this.$refs["dialog.ruleForm"].validate((valid) => {
                //     if (valid) {
                        this.api.admin.user.edit(this.dialog.formItem).then((res) => {
                            if(res.result) {
                                //refresh
                                this.reloadData();
                            }else {
                                this.$Message.error(res.msg);
                            }
                        });
                //     }
                // });
            }else {
                console.log("新增1");
                // this.$refs["dialog.ruleForm"].validate((valid) => {
                //     if (valid) {
                        this.api.admin.user.add(this.dialog.formItem).then((res) => {
                            if(res.result) {
                                //refresh
                                this.reloadData();
                            }else {
                                this.$Message.error(res.msg);
                            }
                        });
                //     }
                // });
            }
        },
        cancel() {
            
        },
        getlist(pkUser) {
            this.api.admin.userrole.getlist({pkUser:pkUser}).then((res) => {
                if(res.result) {
                    console.log('Tree..')
                    console.log(JSON.stringify(res.data));
                    this.roles.tree.alloced = res.data.alloced;
                    this.roles.tree.unalloced = res.data.unalloced;
                }
            });
        },
        showAllocDialog(params) {
            this.roles.modal_dialog = true;
            this.roles.formItem.pkUser = params.row.id;
            this.getlist(params.row.id);
        },
        add() {

            let node = this.$refs["unallocedtree"].getSelectedNodes();
            console.log(JSON.stringify(node));
            if(node.length==0) {
                console.log("未选中角色");
                return;
            }
            console.log(JSON.stringify(node[0].isLeaf));
            if(node.length > 0) {
                if(node[0].isLeaf) {

                    this.nodeOperation(node,this.roles.tree.unalloced, this.roles.tree.alloced);
             
                }else {
                    console.log("is not leaf=====================>");
                    let temp=node[0];
                    //遍历找到节点
                    for(let i = 0;i<this.roles.tree.unalloced.length;i++){
                        let item = this.roles.tree.unalloced[i];
                        if(item.id == temp.id){
                            this.roles.tree.unalloced.splice(i,i+1);
                            break;
                        }
                    }
                    this.roles.tree.alloced.push(temp);
                }
            }
        },
        remove() {
            let node = this.$refs["allocedtree"].getSelectedNodes();
            console.log(node)
            if(node.length > 0) {
            
                if(node[0].isLeaf) {
                   
                    console.log("is leaf=====================>");
                    this.nodeOperation(node,this.roles.tree.alloced, this.roles.tree.unalloced);
                    
                }else{
                     let temp=node[0];
                    //遍历找到节点
                    for(let i = 0;i<this.roles.tree.alloced.length;i++){
                        let item = this.roles.tree.alloced[i];
                        if(item.id == temp.id){
                            this.roles.tree.alloced.splice(i,i+1);
                            break;
                        }
                    }
                    this.roles.tree.unalloced.push(temp);
                }
            }
        },
        //节点的删除添加方法
        nodeOperation(selectNode,distlist,destlist){
            
            //判断删除节点的父节点是否还有子节点
            let parent,temp = selectNode[0];
            for(let i = 0;i<distlist.length;i++){
                parent = distlist[i];
                if(parent.id == temp.parent.id){
                    //如果只有一个子节点删除根节点
                    if(parent.children.length == 1){
                        distlist.splice(i,i+1);
                        break;
                    }else{
                        //删除子节点
                        for(let j=0;j<parent.children.length;j++){
                            if(temp.id == parent.children[j].id){
                                parent.children.splice(j,j+1);
                                break;
                            }
                        }
                    }
                }
            }

            //添加节点  
            if(destlist.length == 0) {
                //判断选中的节点是否有父节点，有就先添加父节点,再添加选中的节点
                let node;
                if(temp.parent){
                    //构造节点
                    node = {id:temp.parent.id,title:temp.parent.title,isLeaf:false,expand:true,children:[]};
                    node.children.push(temp);
                    destlist.push(node);
                }else{
                    destlist.push(temp);
                }
            }else {
                let stp,haveParentnode = false;
                for(stp = 0; stp < destlist.length; stp++) {
                    let item = destlist[stp];
                    if(temp.parent && temp.parent.id == item.id){
                        haveParentnode = true;
                        break;
                    }
                }

                if(temp.parent && haveParentnode){
                    destlist[stp].children.push(temp);
                }else if(temp.parent && !haveParentnode){
                    //构造节点
                    let node = {id:temp.parent.id,title:temp.parent.title,isLeaf:false,expand:true,children:[]};
                    node.children.push(temp);
                    destlist.push(node);
                }else{
                    destlist.push(temp);
                }
            }
        },
        save() {
            let pkRoles = [];
            for(let i = 0; i < this.roles.tree.alloced.length; i++) {
                let rows = this.roles.tree.alloced[i].children;
                if(!rows) {
                    continue;
                }
                for(let j = 0; j < rows.length; j++) {
                    if(!rows[j]) {
                        continue;
                    }
                    pkRoles.push(rows[j].id); 
                }
            }
            console.log("pkRoles==========>"+pkRoles.toString());
            this.api.admin.userrole.save({pkUser: this.roles.formItem.pkUser, pkRoles:pkRoles.toString()}).then((res) => {
                if(res.result) {
                    this.$Message.info('操作成功');
                }else {
                    console.log(res.msg);
                    this.$Message.error('操作失败');
                }
            });
        },
        unsave(){
            
        }
    }
}
</script>
