package com.unind.qms.web.risk.service.internal;

import com.unind.base.data.ApiResponseResult;
import com.unind.base.dbconnection.query.Datagrid;
import com.unind.base.domain.admin.enumeration.BaseEnumConstants;
import com.unind.base.domain.admin.enumeration.BooleanStateEnum;
import com.unind.base.provider.BaseOprService;
import com.unind.base.provider.BusinessException;
import com.unind.base.provider.context.SessionContextUtils;
import com.unind.qms.web.risk.dao.ProductRiskDao;
import com.unind.qms.web.risk.entity.ProductRisk;
import com.unind.qms.web.risk.service.ProductRiskService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springside.modules.persistence.SearchFilter;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
@Transactional(rollbackFor = BusinessException.class)
public class ProductRiskImpl extends BaseOprService implements ProductRiskService {
    @Autowired
    private ProductRiskDao productRiskDao;

    @Transactional
    public ApiResponseResult add(ProductRisk productRisk) throws BusinessException {
        if (null == productRisk || null == productRisk.getBsPrId()) {
            return ApiResponseResult.failure("产品ID为必填项");
        }

        productRisk.setBsCreatedTime(new Date());
//        productRisk.setPkCreatedBy(SessionContextUtils.getCurrentUser().getId());

        productRiskDao.save(productRisk);
        return ApiResponseResult.success("新增成功！").data(productRisk);
    }

    @Transactional
    public ApiResponseResult edit(ProductRisk productRisk) throws BusinessException {
        if (null == productRisk || null == productRisk.getId()) {
            return ApiResponseResult.failure("记录ID为必填项");
        }
        if (null == productRisk.getBsPrId()) {
            return ApiResponseResult.failure("产品不能为空");
        }
        ProductRisk o = productRiskDao.findOne(productRisk.getId());
        if (null == o) {
            return ApiResponseResult.failure("记录ID不存在或已被删除");
        }

        productRisk.setBsModifiedTime(new Date());
        productRisk.setPkModifiedBy(SessionContextUtils.getCurrentUser().getId());
        productRiskDao.save(productRisk);
        return ApiResponseResult.success("修改成功！").data(productRisk);
    }

    @Transactional(readOnly = true)
    public ApiResponseResult getlist(Long bsPrId, PageRequest pageRequest) {
        List<SearchFilter> filters = new ArrayList<SearchFilter>();
        filters.add(new SearchFilter("bsIsDel", SearchFilter.Operator.EQ, BaseEnumConstants.FALSE));
        if (bsPrId != null) {
            filters.add(new SearchFilter("bsPrId", SearchFilter.Operator.EQ, bsPrId));
        }
        Specifications<ProductRisk> spec = Specifications.where(super.and(filters, ProductRisk.class));
        Page<ProductRisk> page = productRiskDao.findAll(spec, pageRequest);
        return ApiResponseResult.success().data(Datagrid.create(page.getContent(), (int) page.getTotalElements(), pageRequest.getPageNumber() + 1, pageRequest.getPageSize()));
    }
}
